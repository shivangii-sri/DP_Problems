Leetcode : https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/
Leetcode Solution below:

Problem : You are given an array prices where prices[i] is the price of a given stock on the ith day, and an integer fee representing a transaction fee.
Find the maximum profit you can achieve. You may complete as many transactions as you like, but you need to pay the transaction fee for each transaction.
Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).


********************************************************************************************************************************************************
Logic :-
Used the entire same approach of Buy and Sell Stock-II. 
Modification => Since we have to pay the transaction fee for each transaction , after sell, we subtarct fee from profit.

********************************************************************************************************************************************************

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#1 Recursion | TC = O(2^N) | SC=O(N) stack space 

Approach of  Buy and Sell Stock-II :
1. We travel the array from 0 to n-1.
Pattern:
1. Express everything in terms of (index, buy flag). buy=1=>you can buy | buy=0 => cannot buy but sell
2. Explore all possibilites. 
  [if buy == 1 : either we buy, or we do not buy]
  [if buy == 0 : either we sell, or we do not sell]
  NOTE:  initially we have the liberty to buy. so at i==0, buy=1
3. Take max of all profits.


------------ Self Logic-Done -------------------

class Solution {
    public int maxProfit(int[] prices, int fee) {
       //if buy==1 => buy , if buy==0 => not buy
        //initially we have the liberty to buy
        return helper(0, 1, prices, fee); 
    }
    
    private static int helper(int i , int buy, int[] a, int fee){
        //base case
        if(i == a.length) return 0;
        
        int profit=0;
        if(buy == 1){
            int take = -a[i] + helper(i+1, 0, a, fee);
            int notTake = 0 + helper(i+1, 1, a, fee); 
            profit = Math.max(take , notTake);
        }
        else{
            int sell = a[i] + helper(i+1, 1, a, fee) - fee;
            int notsell = 0 + helper(i+1, 0, a, fee);
            profit = Math.max(sell , notsell);
        }
        return profit;
    }
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////                                                       
#2. Memoization | TC = O(N x 2) = No. of states | SC = O(N) aux stack space + O(N x 2) dp[][] space

class Solution {
    public int maxProfit(int[] prices, int fee) {
       //if buy==1 => buy , if buy==0 => not buy
        //initially we have the liberty to buy
        int dp[][] = new int[prices.length][2];
        for(int[] x: dp){
            Arrays.fill(x, -1);
        }
        return helper(0, 1, prices, fee, dp); 
    }
    
    private static int helper(int i , int buy, int[] a, int fee, int[][] dp){
        //base case
        if(i == a.length) return 0;
        if(dp[i][buy] != -1) return dp[i][buy];
        
        int profit=0;
        if(buy == 1){
            int take = -a[i] + helper(i+1, 0, a, fee, dp);
            int notTake = 0 + helper(i+1, 1, a, fee, dp); 
            profit = Math.max(take , notTake);
        }
        else{
            int sell = a[i] + helper(i+1, 1, a, fee, dp) - fee;
            int notsell = 0 + helper(i+1, 0, a, fee, dp);
            profit = Math.max(sell , notsell);
        }
        return dp[i][buy] = profit;
    }
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#3. Tabulation |   TC = O(N x 2) = No. of states | SC = O(N x 2) dp[][] space

class Solution {
    public int maxProfit(int[] prices, int fee) {
        //if buy==1 => buy , if buy==0 => not buy
        //initially we have the liberty to buy
        int n = prices.length;
        int dp[][] = new int[n + 1][2]; // n+2 to Initialise dp[i >=a.length]=0 i.e i can max go to i+2 = len+2     
        
        //1. Initialisation
        dp[n][0] = 0;
        dp[n][1] = 0;
      
        
        for(int i=n-1; i>=0 ; i--){
            for(int buy = 0; buy<=1; buy++){
                int profit=0;
                if(buy == 1){
                    int take = -prices[i] + dp[i+1][0];
                    int notTake = 0 + dp[i+1][1]; 
                    profit = Math.max(take , notTake);
                }
                else{
                    int sell = prices[i] + dp[i+1][1] - fee;
                    int notsell = 0 + dp[i+1][0];
                    profit = Math.max(sell , notsell);
                }
                dp[i][buy] = profit;   
            }            
        }             
        return dp[0][1];
    }
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#4. Space Optimization | TC = O(N x 2) = No. of states | SC = O(1) consatnt space for 2 size ahead[]

class Solution {
    public int maxProfit(int[] prices, int fee) {
        //if buy==1 => buy , if buy==0 => not buy
        //initially we have the liberty to buy
        int n = prices.length;
        int ahead[] = new int[2]; // n+1 to Initialise dp[i==a.length]=0     
        
        //1. Initialisation
        ahead[0] = 0;
        ahead[1] = 0;
        
        for(int i=prices.length-1; i>=0 ; i--){
            
            int cur[] = new int[2];
            
            for(int buy = 0; buy<=1; buy++){
                int profit=0;
                if(buy == 1){
                    int take = -prices[i] + ahead[0];
                    int notTake = 0 + ahead[1]; 
                    profit = Math.max(take , notTake);
                }
                else{
                    int sell = prices[i] + ahead[1] - fee;
                    int notsell = 0 + ahead[0];
                    profit = Math.max(sell , notsell);
                }
                cur[buy] = profit;   
            }            
            ahead = cur;
        }
              
        return ahead[1];
    }                
}
