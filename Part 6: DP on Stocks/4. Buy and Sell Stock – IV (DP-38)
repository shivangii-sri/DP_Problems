Leetcode HARD : https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iv/
Leetcode Solution below:

Problem : You are given an integer array prices where prices[i] is the price of a given stock on the ith day, and an integer k.
Find the maximum profit you can achieve. You may complete at most k transactions.
Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).

Note: This q is same as Best Time to Buy and Sell Stock III.


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#1 Recursion | TC = O(2^N) :two possibilities for every index | SC=O(N) stack space 
Approach : Just copy the entire Stock-III code, replace atmost value by k instead of 2.

class Solution {
    public int maxProfit(int k, int[] prices) {
         return helper(0, 1, k, prices);
    }
     private static int helper(int i, int buy, int atmost, int[] a){
        //base
        if(i == a.length) return 0;
        if(atmost == 0) return 0;
        
        int profit=0;
        if(buy == 1){
            int take = -a[i] + helper(i+1, 0, atmost,  a);
            int notTake = 0 + helper(i+1, 1, atmost, a); 
            profit = Math.max(take , notTake);
        }
        else{
            int sell = a[i] + helper(i+1, 1, atmost-1,  a);
            int notsell = 0 + helper(i+1, 0, atmost, a);
            profit = Math.max(sell , notsell);
        }
        return profit;
    }
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////                                                       
#2. Memoization | TC = O(N x 2 x k) = No. of states | SC = O(N) aux stack space + O(N x 2 x k) dp[][][] space


class Solution {
    public int maxProfit(int k, int[] prices) {
        int n = prices.length;
        int dp[][][] = new int[n][2][k+1]; // States => buy=0/1  , if k=2 => atmost=0/1/2
        for(int[][] x : dp){
            for(int[] y : x){
                Arrays.fill(y, -1);
            }
        }
        return helper(0, 1, k, prices, dp);
    }
    private static int helper(int i, int buy, int atmost, int[] a, int[][][] dp){
        //base
        if(i == a.length) return 0;
        if(atmost == 0) return 0;
        if(dp[i][buy][atmost] != -1) return dp[i][buy][atmost];
        
        
        int profit=0;
        if(buy == 1){
            int take = -a[i] + helper(i+1, 0, atmost,  a, dp);
            int notTake = 0 + helper(i+1, 1, atmost, a, dp); 
            profit = Math.max(take , notTake);
        }
        else{
            int sell = a[i] + helper(i+1, 1, atmost-1,  a, dp);
            int notsell = 0 + helper(i+1, 0, atmost, a, dp);
            profit = Math.max(sell , notsell);
        }
        return dp[i][buy][atmost] = profit;
    }
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#3. Tabulation |   TC = O(N x 2 x k) = No. of states | SC = O(N x 2 x k) dp[][][] space


class Solution {
    public int maxProfit(int k, int[] prices) {
        int n = prices.length;
        int dp[][][] = new int[n+1][2][k+1]; //buy=0/1  , if k=2=> atmost=0/1/2
      
        //Initialisation
        
        for(int i=n; i>=0; i--){
            
            for(int buy=0; buy<=1; buy++){
                
                for(int atmost=0; atmost<=k; atmost++){
                    //1. Initialisation
                    if(i==n || atmost == 0) dp[i][buy][atmost]=0;
                    else{
                        //2.Paste recursion logic
                        int profit=0;
                        if(buy == 1){
                            int take = -prices[i] + dp[i+1][0][atmost];
                            int notTake = 0 + dp[i+1][1][atmost]; 
                            profit = Math.max(take , notTake);
                        }
                        else{
                            int sell = prices[i] + dp[i+1][1][atmost-1]; 
                            int notsell = 0 + dp[i+1][0][atmost]; 
                            profit = Math.max(sell , notsell);
                        }
                        dp[i][buy][atmost] = profit;
                        
                    }
                }
            }
        }        
        return dp[0][1][k]; 
    }   
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#4. Space Optimization | TC = O(2 x k) = No. of states | SC = O(1) consatnt space for after[2][K+1]
NOTE : Space Optimize is to reduce dp array by one dimension.
1-D -> variable
2-D -> 1-D
3-D -> 2-D

class Solution {
    public int maxProfit(int k, int[] prices) {
        int n = prices.length;
        int after[][] = new int[2][k+1]; //buy=0/1  , if k=2 => atmost=0/1/2
      
        //Initialisation
        
        for(int i=n; i>=0; i--){
            
            int cur[][] = new int[2][k+1];
            
            for(int buy=0; buy<=1; buy++){
                
                for(int atmost=0; atmost<=k; atmost++){
                    //1. Initialisation
                    if(i==n || atmost == 0) after[buy][atmost]=0;
                    else{
                        //2.Paste recursion logic
                        int profit=0;
                        if(buy == 1){
                            int take = -prices[i] + after[0][atmost];
                            int notTake = 0 + after[1][atmost]; 
                            profit = Math.max(take , notTake);
                        }
                        else{
                            int sell = prices[i] + after[1][atmost-1]; 
                            int notsell = 0 + after[0][atmost]; 
                            profit = Math.max(sell , notsell);
                        }
                        cur[buy][atmost] = profit;
                        
                    }
                }
            }
            after = cur;
        }   
        return after[1][k]; 
    }   
}
