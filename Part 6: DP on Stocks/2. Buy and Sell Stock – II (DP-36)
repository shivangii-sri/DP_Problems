Leetcode : https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/
Leetcode Solution below:

Problem : You are given an integer array prices where prices[i] is the price of a given stock on the ith day.
On each day, you may decide to buy and/or sell the stock. You can only hold at most one share of the stock at any time. 
However, you can buy it then immediately sell it on the same day.Find and return the maximum profit you can achieve.


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#1 Recursion | TC = O(2^N) | SC=O(N) stack space 

Approach:
1. We travel the array from 0 to n-1.
Pattern:
1. Express everything in terms of (index, buy flag). buy=1=>you can buy | buy=0 => cannot buy but sell
2. Explore all possibilites. 
  [if buy == 1 : either we buy, or we do not buy]
  [if buy == 0 : either we sell, or we do not sell]
  NOTE:  initially we have the liberty to buy. so at i==0, buy=1
3. Take max of all profits.


class Solution {
    public int maxProfit(int[] prices) {
        //if buy==1 => buy , if buy==0 => not buy
        //initially we have the liberty to buy
        return helper(0, 1, prices);
    }
    private static int helper(int i , int buy, int[] a){
        //base case
        if(i == a.length) return 0;
        
        int profit=0;
        if(buy == 1){
            int take = -a[i] + helper(i+1, 0, a);
            int notTake = 0 + helper(i+1, 1, a); 
            profit = Math.max(take , notTake);
        }
        else{
            int sell = a[i] + helper(i+1, 1, a);
            int notsell = 0 + helper(i+1, 0, a);
            profit = Math.max(sell , notsell);
        }
        return profit;
    }
}
