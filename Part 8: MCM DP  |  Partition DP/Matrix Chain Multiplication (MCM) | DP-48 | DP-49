GFG Link : https://practice.geeksforgeeks.org/problems/matrix-chain-multiplication0303/1

GFG HARD problem - Partition logic is bit tough. 

#1. Recursion
// Recursion
// TC = exponential
// SC = O(n) stack space
class Solution{
    static int matrixMultiplication(int N, int arr[])
    {
        // code here
        return helper(1 , N-1, arr); //we call helper from 1st index to End Index having value.
    }
    public static int helper(int i, int j, int[] arr){
        if(i == j) return 0;
        
        //try all partitions

        int mini = Integer.MAX_VALUE;

        for(int k=i; k<= j-1 ; k++){
            int steps = arr[i-1] * arr[k] * arr[j] + helper(i, k, arr) + helper(k+1,j,arr);
            mini = Math.min(mini , steps);
        }
        return mini;
    }
}

#2. Memoization
// Memo
// TC = O(n x n )
// SC = O(n) stack space + O(n x n) dp[][]
class Solution{
    static int matrixMultiplication(int N, int arr[])
    {
        // code here
        int dp[][] = new int[N][N];
        for(int[] x : dp){
            Arrays.fill(x , -1);
        }
        return helper(1 , N-1, arr, dp); //we call helper from 1st index to End Index having value.
    }
    public static int helper(int i, int j, int[] arr, int[][] dp){
        if(i == j) return 0;
        if(dp[i][j] != -1) return dp[i][j];
        
        //try all partitions

        int mini = Integer.MAX_VALUE;

        for(int k=i; k<= j-1 ; k++){
            int steps = arr[i-1] * arr[k] * arr[j] + helper(i, k, arr,dp) + helper(k+1,j,arr,dp);
            mini = Math.min(mini , steps);
        }
        return dp[i][j] = mini;
    }
}


#3. Tabulation
// Tabu
// TC = O(n x n )
// SC = O(n x n) dp[][]
class Solution{
    static int matrixMultiplication(int N, int arr[])
    {
        // code here
        int dp[][] = new int[N][N];
        //Initialisation
        for(int i=1; i<= N-1; i++){
            dp[i][i] = 0;
        }
        
        for(int i=N-1; i>=1; i--){
            for(int j=i+1; j<N; j++){
  
                //try all partitions
                int mini = Integer.MAX_VALUE;
                for(int k=i; k<= j-1 ; k++){
                    int steps = arr[i-1] * arr[k] * arr[j] + dp[i][k] + dp[k+1][j]; 
                    mini = Math.min(mini , steps);
                }
                dp[i][j] = mini;
            }
        }
        return dp[1][N-1];  //we call helper from 1st index to End Index having value.
    }
}
