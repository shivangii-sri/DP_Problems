////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#1 Recursion | TC = O(2^ (No. of elements in matrix)) | SC= O(N) -> stack space will go upto length of rows in matrix i.e N 
//Recursion gives TLE

public class Solution {
    public static int minimumPathSum(int[][] triangle, int n) {
        // Write your code here.      
        return helper(0, 0, n, triangle);
    }
    private static int helper(int i, int j, int n, int[][] a){
        //base
        if(i == n-1) return a[i][j];//whenever i reach last row, i return value of a[i][j]
        
        int down1 = helper(i+1, j, n, a);
        int down2 = helper(i+1, j+1, n, a);        
        return a[i][j] + Math.min(down1 , down2);
    }    
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#2. Memoization | TC = O(N x N) = No. of states | SC= O(N)-> stack space + O(N x N)-> dp[][] space
==> All test cases passed!

public class Solution {
    public static int minimumPathSum(int[][] triangle, int n) {
        int[][] dp = new int[n][n]; //however its a triangular array, so half part of the dp[][] was not required, but to keep it simpl, we take dp[n][n]
        for(int[] x : dp){
            Arrays.fill(x, -1);
        }
        return helper(0, 0, n, triangle, dp);
    }
    private static int helper(int i, int j, int n, int[][] a, int[][] dp){
        //base
        if(i == n-1) return a[i][j];//whenever i reach last row
        if(dp[i][j] != -1) return dp[i][j];
        
        int down1 = helper(i+1, j, n, a, dp);
        int down2 = helper(i+1, j+1, n, a, dp);
        
        return dp[i][j] = a[i][j] + Math.min(down1 , down2);
    }
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#3. Tabulation | TC = O(N x N) to compute these states | SC= O(N x N) dp[][] space, no stack space 
Approach :
1. Memoization was from 0,0 to last row, So Tabulation will be top down i.e from last row to 0,0
2. Answer will be stored at 0,0, what we returned in recursion code

public class Solution {
  
    public static int minimumPathSum(int[][] triangle, int n) {
        int[][] dp = new int[n][n];
    
        for(int i=n-1; i>=0; i--){
            for(int j=i; j>=0; j--){
                //Initialization
                if(i == n-1){
                    dp[i][j] = triangle[i][j];
                }
                else{
                    //paste recursion logic
                    int down1 = dp[i+1][j];
                    int down2 = dp[i+1][j+1];        
                    dp[i][j] = triangle[i][j] + Math.min(down1 , down2);
                }
            }
        }
       
        return dp[0][0];
    }
}
