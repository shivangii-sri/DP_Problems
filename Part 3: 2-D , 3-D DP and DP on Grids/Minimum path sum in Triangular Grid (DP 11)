********************************************************************************************************************************************************************

Recursion Tree Image : ![image](https://user-images.githubusercontent.com/66727290/179241246-26e193a0-44b8-4d03-80b5-32da5c8650da.png)

********************************************************************************************************************************************************************

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#1 Recursion | TC = O(2^ (No. of elements in matrix)) | SC= O(N) -> stack space will go upto length of rows in matrix i.e N 
//Recursion gives TLE

public class Solution {
    public static int minimumPathSum(int[][] triangle, int n) {
        // Write your code here.      
        return helper(0, 0, n, triangle);
    }
    private static int helper(int i, int j, int n, int[][] a){
        //base
        if(i == n-1) return a[i][j];//whenever i reach last row, i return value of a[i][j]
        
        int down1 = helper(i+1, j, n, a);
        int down2 = helper(i+1, j+1, n, a);        
        return a[i][j] + Math.min(down1 , down2);
    }    
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#2. Memoization | TC = O(N x N) = No. of states | SC= O(N)-> stack space + O(N x N)-> dp[][] space
==> All test cases passed!

public class Solution {
    public static int minimumPathSum(int[][] triangle, int n) {
        int[][] dp = new int[n][n]; //however its a triangular array, so half part of the dp[][] was not required, but to keep it simpl, we take dp[n][n]
        for(int[] x : dp){
            Arrays.fill(x, -1);
        }
        return helper(0, 0, n, triangle, dp);
    }
    private static int helper(int i, int j, int n, int[][] a, int[][] dp){
        //base
        if(i == n-1) return a[i][j];//whenever i reach last row
        if(dp[i][j] != -1) return dp[i][j];
        
        int down1 = helper(i+1, j, n, a, dp);
        int down2 = helper(i+1, j+1, n, a, dp);
        
        return dp[i][j] = a[i][j] + Math.min(down1 , down2);
    }
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#3. Tabulation | TC = O(N x N) to compute these states | SC= O(N x N) dp[][] space, no stack space 
Approach :
1. Memoization was from 0,0 to last row, So Tabulation will be top down i.e from last row to 0,0
2. Answer will be stored at 0,0, what we returned in recursion code

public class Solution {
  
    public static int minimumPathSum(int[][] triangle, int n) {
        int[][] dp = new int[n][n];
    
        for(int i=n-1; i>=0; i--){
            for(int j=i; j>=0; j--){
                //Initialization
                if(i == n-1){
                    dp[i][j] = triangle[i][j];
                }
                else{
                    //paste recursion logic
                    int down1 = dp[i+1][j];
                    int down2 = dp[i+1][j+1];        
                    dp[i][j] = triangle[i][j] + Math.min(down1 , down2);
                }
            }
        }
       
        return dp[0][0];
    }
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#4. Space Optimization | TC = O(N x N)  | SC = O(N)-> space of next[] of N=columns size
==> All test cases passed!

Approach:
1. Since in tabulation, we filled dp[][] from last row to first row, So here we take next[] array as last row. Initialise it in for loop with values.
2. Keep on computing cur row using next row, and change next=cur.
3. Finally we return next[0] as answer.


public class Solution {
    public static int minimumPathSum(int[][] triangle, int n) {
        int[] next = new int[n];
        //Initialize -> did it in for loop itself
            
        for(int i=n-1; i>=0; i--){
            int[] cur = new int[i+1]; //NOTE: cur size = i+1, Eg. n=4, starting to compute last low, it has 4 elements, but we started i=n-1=3, so cur size should be i+1
            for(int j=i; j>=0; j--){
                //Initialization
                if(i == n-1){
                    cur[j] = triangle[i][j];
                }
                else{
                    //paste recursion logic
                    int down1 = next[j];
                    int down2 = next[j+1];        
                    cur[j] = triangle[i][j] + Math.min(down1 , down2);
                }
            }
            next = cur;
        }
        return next[0];
    }
}
