********************************************************************************************************************************************************************

Leetcode link : https://leetcode.com/problems/minimum-falling-path-sum/
Below is Leetcode Solution

Question - Given an n x n array of integers matrix, return the minimum sum of any falling path through matrix.
A falling path starts at any element in the first row and chooses the element in the next row that is either directly below or diagonally left/right. 
Specifically, the next element from position (row, col) will be (row + 1, col - 1), (row + 1, col), or (row + 1, col + 1).

********************************************************************************************************************************************************************

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#1 Recursion | TC = O(3 ^ (N x M)) | SC= O(N) -> stack space will go upto length of rows deep
//Recursion gives TLE


class Solution {
    // Recursion - Top Down 
    public int minFallingPathSum(int[][] matrix) {
        int row = matrix.length;
        int col = matrix[0].length;
        
        //since start point is variable, we call heper() for all possible star5t points and return MINIMUM among these
        int res = Integer.MAX_VALUE;
        for(int j=0 ; j<col ; j++){
            res = Math.min(res, helper(row-1 , j, matrix));
        }
        return res;
    }    
    private static int helper(int i, int j, int[][] a){       
        // base
        if(j<0 || j>= a[0].length) return Integer.MAX_VALUE; //check if column going out of bound
        if(i == 0) return a[i][j]; //reached first row , so return
            
        int diagL = helper(i-1, j-1, a); 
        int down  = helper(i-1, j  , a);
        int diagR = helper(i-1, j+1, a);
            
        return a[i][j] + Math.min(diagL , Math.min(down , diagR)); //return cur value + MINIMUM of these 3
    }
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#2. Memoization | TC = O(N x M) = No. of states |  SC= O(N) ->stack space + O(N x M)->dp[][] space
//MEMO -> Top - Down

class Solution {
    public int minFallingPathSum(int[][] matrix) {
        int row = matrix.length;
        int col = matrix[0].length;
        
        int[][] dp = new int[row][col];
        for(int[] x : dp){
            Arrays.fill(x, -1);
        }
        
        //since start points are variables, we call helper() for all possible start points and return MINIMUM among these.
        int res = Integer.MAX_VALUE;
        for(int j=0 ; j<col ; j++){
            res = Math.min(res, helper(row-1 , j, matrix, dp));
        }
        return res;
    }
    
    private static int helper(int i, int j, int[][] a , int[][] dp){
   
        if(j<0 || j>= a[0].length) return Integer.MAX_VALUE; //check if column going out of bound
        if(i == 0) return a[i][j]; //reached first row , so return
        if(dp[i][j] != -1) return dp[i][j];
          
        int diagL = helper(i-1, j-1, a, dp); 
        int down  = helper(i-1, j  , a, dp);
        int diagR = helper(i-1, j+1, a, dp);
            
        return dp[i][j] = a[i][j] + Math.min(diagL , Math.min(down , diagR)); //return cur value + MINIMUM of these 3
    }
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#3. Tabulation | TC = O(N x M)) to compute dp[][] | SC= O(M x N) dp[][] space 

class Solution {    
    public int minFallingPathSum(int[][] matrix) {
        int row = matrix.length;
        int col = matrix[0].length;
        int res = Integer.MAX_VALUE;
        
        int[][] dp = new int[row][col];
        
        for(int i =0; i<row; i++){
            for(int j=0; j<col; j++){
                //Initialization of base case -> the first row
                if(i == 0){
                    dp[i][j] = matrix[i][j];
                }
                else{
                    //paste the memo logic
                    int diagL = Integer.MAX_VALUE;
                    int up = Integer.MAX_VALUE;
                    int diagR = Integer.MAX_VALUE;
                    
                    if(j>0) diagL = dp[i-1][j-1]; 
                    up  = dp[i-1][j];
                    if(j<col-1) diagR = dp[i-1][j+1];            
                    
                    dp[i][j] = matrix[i][j] + Math.min(diagL , Math.min(up , diagR)); //return cur value + MINIMUM of these 3                    
                }
                //Since we called for variable starting states in memo, we take minimum value among all the cells in last row, and return res.
                // NOTE: this step to store min of last row must be done outside if-else, otherwise gives error for testcase like this-> [[-48]] 
                if(i == row - 1) //if we reach last row
                    res = Math.min(res, dp[i][j]);
            }
        }
        return res;
    }   
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#4. Space Optimization | TC = O(N x M)  | SC = O(N)-> space of prev[] of size N =columns size
==> All test cases passed!

class Solution {    
    public int minFallingPathSum(int[][] matrix) {
        int row = matrix.length;
        int col = matrix[0].length;
        int res = Integer.MAX_VALUE;
        
        int prev[] = new int[col];
        
        for(int i =0; i<row; i++){
            int cur[] = new int[col];
            
            for(int j=0; j<col; j++){
                //Initialization- the first row
                if(i == 0){
                    cur[j] = matrix[i][j];
                }
                else{
                    int diagL = Integer.MAX_VALUE;
                    int up = Integer.MAX_VALUE;
                    int diagR = Integer.MAX_VALUE;
                    
                    if(j>0) diagL = prev[j-1]; 
                    up  = prev[j];
                    if(j < col-1) diagR = prev[j+1];            
                    
                    cur[j] = matrix[i][j] + Math.min(diagL , Math.min(up , diagR)); //return cur value + MINIMUM of these 3
                    
                   
                }
                if(i == row - 1) //if we reach last row- we have variable destination points
                    res = Math.min(res, cur[j]);
            }
            prev = cur;
        }
        return res;
    }   
}


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


