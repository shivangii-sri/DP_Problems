Question :  A Ninja has an ‘N’ Day training schedule. He has to perform one of these three activities (Running, Fighting Practice, or Learning New Moves) each day. 
There are merit points associated with performing an activity each day. The same activity can’t be performed on two consecutive days. 
We need to find the maximum merit points the ninja can attain in N Days.
We are given a 2D Array POINTS of size ‘N*3’ which tells us the merit point of specific activity on that particular day. 
Our task is to calculate the maximum number of merit points that the ninja can earn.

*********************************************************************************************************************************************************************
Recursion Tree Image for Recurive Code : ![image](https://user-images.githubusercontent.com/66727290/178701427-4de44b98-8d7c-4a8a-b573-af1e87bf92d4.png)

*********************************************************************************************************************************************************************


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#1 Recursion | TC = O(2^N)  ,  SC = O(N * N-2) - recursive stack space

***** Striver Code ********
Approach: 
1. Start with last day (n-1th day) of points array.
2. Initially we pass task=3, meaning initially no task has been done. 
3. At each day, we evaluate max merit points by finding all possible ways
    a. We call recursion for every task not matching with current task no, bcz same task cannot be repeated on consecutive days.
    b. We add current merit points of current arr[day][task]
    c. While calling the function, we pass the prev day as day-1, with task not matching in i=0 to 2.
    d. We store maxi of all the func calls. and return maxi.
4. BASE CASE- whenever we reach day 0, with task no. say x, it means task x has been performed previously. Thus we return max merit b/w other two tasks in day 0.

public class Solution {
    public static int ninjaTraining(int n, int points[][]) {
        // Write your code here..
        int task = 3;
        return helper(n-1 , task , points);
    }
    private static int helper(int day, int task, int arr[][]){
        //base case
        if(day == 0) {
            int maxi =0;
            for(int i=0; i<=2; i++){
                if(i != task){
                    maxi = Math.max(maxi , arr[0][i]);
                }
            }    
            return maxi;
        }       
        int ans = 0;
        for(int i=0; i<=2 ; i++){
            if(i == task) continue;
            int temp = arr[day][i] + helper(day-1, i, arr);
            ans = Math.max(ans, temp);                       
        }
        return ans;
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#2. Memoization
==> TC = O(N * 4) * 3 => total Nx4 states, for every state- we are running for loop of size 3
==> SC = O(N) stack space + O(N*4) dp[] space 
==> This code gives Stack Overflow ERROR-> 10/11 test cases passed on code studio

import java.util.*;
public class Solution {
    public static int ninjaTraining(int n, int points[][]) {
        // Write your code here..
        int dp[][] = new int[n][4]; //find what max possible values for n and task no. will be. For n-> 0 to n-1 , for task index-> 0,1,2,3
         for(int[] x:dp){
            Arrays.fill(x,-1);
        }
        int task = 3;
        return helper(n-1 , task , points, dp);
    }
    private static int helper(int day, int task, int arr[][], int[][] dp){
        if(day == 0) {
            int maxi =0;
            for(int i=0; i<=2; i++){
                if(i != task){
                    maxi = Math.max(maxi , arr[0][i]);
                }
            }    
            return maxi;
        }      
        if(dp[day][task] != -1) return dp[day][task];
        
        int ans = 0;
        for(int i=0; i<=2 ; i++){
            if(i != task){
                int temp = arr[day][i] + helper(day-1, i, arr, dp);
                ans = Math.max(ans, temp);                       
            }
        }
        return dp[day][task] = ans;
    }  
}   

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#3. Tabulation 
==> TC = O(N * 4) * 3 => there are 3 nested loops.
==> SC = O(Nx4) -> dp[] space 
==> All test cases passed!


import java.util.*;
public class Solution {
    public static int ninjaTraining(int n, int points[][]) {
        int dp[][] = new int[n][4]; //find what max possible values for n and task no. will be
        // for n-> 0 to n-1 , for task index-> 0,1,2,3
        //all values of dp[][] are initially are filled with 0
        
        //1. Initializaton of base case
        dp[0][0] = Math.max( points[0][1] , points[0][2]);
        dp[0][1] = Math.max( points[0][0] , points[0][2]);            
        dp[0][2] = Math.max( points[0][0] , points[0][1]);   
        dp[0][3] = Math.max( points[0][0] , Math.max( points[0][1] , points[0][2] ) );
        
        //to fill the dp[][] array, we need 2 nested for loops.
        
        for(int day=1; day<=n-1 ; day++){
            for(int task = 0; task<4; task++){
                //copy paste the recursion logic 
                //int ans = 0; no need bcz my dp[day][task] already = 0
                for(int i=0; i<=2 ; i++){
                    if(i != task){
                        int temp = points[day][i] + dp[day-1][i];
                        dp[day][task] = Math.max(dp[day][task], temp);                       
                    }
                }
                
            }
        }
        return dp[n-1][3]; 
    }
}   
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#4. Space Optimization
==> TC = O(N * 4) * 3 => there are 3 nested loops.
==> SC = O(1) -> constant space for just 4-size array -> Mind Blowing!!
==> All test cases passed!


import java.util.*;
public class Solution {
    //Space Optimization - O(1) almost constant space with 4 size array! mind blowing
    
    public static int ninjaTraining(int n, int points[][]) {
        //The first array only we are initializing. we will use this to compute next array. Then store this computed array into prev to compute next array.
        //1. Initializaton of base case
        int prev[] = new int[4];          
        prev[0] = Math.max( points[0][1] , points[0][2]);
        prev[1] = Math.max( points[0][0] , points[0][2]);            
        prev[2] = Math.max( points[0][0] , points[0][1]);   
        prev[3] = Math.max( points[0][0] , Math.max( points[0][1] , points[0][2] ) );
        
        //to fill the dp[][] array, we need 2 nested for loops in tabulation
        
        for(int day=1; day<=n-1 ; day++){
            int[] temp = new int[4];  //to compute current array, create a temp[] of size 4
            for(int task = 0; task<4; task++){
                
                //copy paste the recursion logic 
                for(int i=0; i<=2 ; i++){
                    if(i != task){
                        //change dp[day] to temp[] bcz current day is temp[]
                        //change dp[day-1] to prev[] bcz prev day is prev[]
                        temp[task] = Math.max( temp[task], points[day][i] + prev[i]);                       
                    }
                }
            }
            prev = temp;
        }
        return prev[3]; 
    }
}   



