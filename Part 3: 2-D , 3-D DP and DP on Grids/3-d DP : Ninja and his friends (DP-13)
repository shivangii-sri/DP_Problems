/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#1 Recursion | TC = O(3 ^ (N x M)) | SC= O(N) -> stack space will go upto length of rows deep
//Recursion gives TLE

Approach:
1. Express everything in terms of (i1, j1) and (i2, j2)
2. Explore all paths. Left Diagonal, Down , Right Diagonal
3. Return Max Sum

import java.util.*;
public class Solution {
	public static int maximumChocolates(int r, int c, int[][] grid) {
        int i=0, j1=0, j2=c-1;
        return helper(i, j1, j2, grid);
	}
    private static int helper(int i, int j1, int j2, int[][] a){
        //base case
        if(j1<0 || j1>=a[0].length || j2<0 || j2>=a[0].length) {
            return Integer.MIN_VALUE;
        }
        if(i == a.length-1){
            if(j1 == j2) return a[i][j1];
            else return a[i][j1] + a[i][j2];
        }
        
        //try 9 combos- for all 3 dirn of Alice, we have 3 possible dirn of Bob
        int maxi = Integer.MIN_VALUE;
        for(int dj1=-1 ; dj1<=1  ;dj1++){
            for(int dj2=-1 ; dj2<=1 ; dj2++){
                if(j1 == j2){
                   maxi = Math.max(maxi, a[i][j1] + helper(i+1, j1+dj1 , j2+dj2, a) ); 
                }  
                else{
                    maxi = Math.max(maxi, a[i][j1] + a[i][j2] + helper(i+1, j1+dj1 , j2+dj2, a) );
                }
            }
        }
        return maxi;
    }
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#2. Memoization | TC = O(N x M) = No. of states |  SC= O(N) ->stack space + O(N x M)->dp[][] space
//MEMO -> going firt row to last row but REMEMBER- Recusrion is always Top-down, thus MEMO also.

