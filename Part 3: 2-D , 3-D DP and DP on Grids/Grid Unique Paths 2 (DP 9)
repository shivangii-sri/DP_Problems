Leetcode Link : https://leetcode.com/problems/unique-paths-ii/ -> (Question slighly diff that the first cell i.e a[0][0] can also be a blocker)

The below solutions are btw for Code Studio problem, link available on Striver DP Sheet

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#1 Recursion | TC = O(2^ (MxN)) | SC= O(length of path) = O(m-1 + n-1) -> stack space will go length of path deeper 

public class Solution {
    public static int mazeObstacles(int n, int m, ArrayList<ArrayList<Integer>> mat) {
        return helper(n-1, m-1 , mat);
    }
    private static int helper(int i , int j, ArrayList<ArrayList<Integer>> mat){
        //base case
        if(i==0 && j==0) return 1; //when reaching destination
        if(i < 0 || j < 0) return 0; //when going out of bound
        if(i>= 0 && j>=0 && mat.get(i).get(j) == -1) return 0; 
        
        int left = helper(i , j-1 , mat);
        int up = helper(i-1 , j , mat);
        return left + up;
  }
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                      stack space is path length  +  dp[][] space
#2. Memoization | TC = O(M x N) = No. of states |     SC= O(m-1 + n-1)            +  O(M x N) 

public class Solution {
    //Declare global variable mod
    static int mod = (int)(1e9 + 7);
    
    static int mazeObstacles(int n, int m, ArrayList<ArrayList<Integer>> mat) {
        int dp[][] = new int[n][m];
        for(int[] x : dp){
            Arrays.fill(x, -1);
        }
        return countPaths(n-1, m-1 , mat, dp);
    }
    private static int countPaths(int i , int j, ArrayList<ArrayList<Integer>> mat , int[][] dp){
        //base case
        if(i==0 && j==0) return 1; //when reaching destination
        if(i < 0 || j < 0) return 0; //when going out of bound
        if(i>= 0 && j>=0 && mat.get(i).get(j) == -1) return 0; 
        if(dp[i][j] != -1) return dp[i][j];
        
        int left = countPaths(i , j-1 , mat, dp);
        int up = countPaths(i-1 , j , mat, dp);
        return dp[i][j] = (left + up) % mod; //store answer % mod
  }
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#3. Tabulation | TC = O(MxN)) to compute these states | SC= O(M x N) dp[][] space 
==> All test cases passed!


import java.util.*;
public class Solution {
    //global variable mod
    static int mod = (int)(1e9 + 7);
    
    static int mazeObstacles(int n, int m, ArrayList<ArrayList<Integer>> mat) {
        int dp[][] = new int[n][m];
        //Initialize
        //dp[0][0] = 1;
        
        for(int i=0; i<n ; i++){
            for(int j=0; j<m; j++){
                if(i==0 && j==0) dp[i][j] = 1;
                else if( mat.get(i).get(j) == -1) dp[i][j] = 0; // bloacker path
                else{ //compute dp[i][j]
                    int left=0, up=0; 
                    if(j > 0) left = dp[i][j-1] ;
                    if(i > 0) up = dp[i-1][j] ;
                    dp[i][j] = (left + up) % mod; //store answer % mod
                }
            }
        }       
        return dp[n-1][m-1];
    }
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#4. Space Optimization | TC = O(N * 4) * 3 => there are 3 nested loops | SC = O(N)-> space of prev[] of size N 
==> All test cases passed!


public class Solution {
    //global variable mod
    static int mod = (int)(1e9 + 7);
    
    static int mazeObstacles(int n, int m, ArrayList<ArrayList<Integer>> mat) {
        int prev[] = new int[m];
        //Initialize
        //dp[0][0] = 1;
        
        for(int i=0; i<n ; i++){
            int cur[] = new int[m];
            
            for(int j=0; j<m; j++){
                if(i==0 && j==0) cur[j] = 1;
                else if( mat.get(i).get(j) == -1) cur[j] = 0; // bloacker path
                else{ //compute dp[i][j]
                    int left=0, up=0; 
                    if(j > 0) left = cur[j-1] ;
                    if(i > 0) up = prev[j] ;
                    cur[j] = (left + up) % mod; //store answer % mod
                }
            }
            prev = cur;
        }       
        return prev[m-1];
    }
}

