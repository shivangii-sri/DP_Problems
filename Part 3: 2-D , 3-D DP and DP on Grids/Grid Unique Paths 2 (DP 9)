/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#1 Recursion | TC = O(2^ (MxN)) | SC= O(length of path) = O(m-1 + n-1) -> stack space will go length of path deeper 

public class Solution {
    public static int mazeObstacles(int n, int m, ArrayList<ArrayList<Integer>> mat) {
        return helper(n-1, m-1 , mat);
    }
    private static int helper(int i , int j, ArrayList<ArrayList<Integer>> mat){
        //base case
        if(i==0 && j==0) return 1; //when reaching destination
        if(i < 0 || j < 0) return 0; //when going out of bound
        if(i>= 0 && j>=0 && mat.get(i).get(j) == -1) return 0; 
        
        int left = countPaths(i , j-1 , mat);
        int up = countPaths(i-1 , j , mat);
        return left + up;
  }
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                      stack space is path length  +  dp[][] space
#2. Memoization | TC = O(M x N) = No. of states |     SC= O(m-1 + n-1)            +  O(M x N) 

public class Solution {
    //Declare global variable mod
    static int mod = (int)(1e9 + 7);
    
    static int mazeObstacles(int n, int m, ArrayList<ArrayList<Integer>> mat) {
        int dp[][] = new int[n][m];
        for(int[] x : dp){
            Arrays.fill(x, -1);
        }
        return countPaths(n-1, m-1 , mat, dp);
    }
    private static int countPaths(int i , int j, ArrayList<ArrayList<Integer>> mat , int[][] dp){
        //base case
        if(i==0 && j==0) return 1; //when reaching destination
        if(i < 0 || j < 0) return 0; //when going out of bound
        if(i>= 0 && j>=0 && mat.get(i).get(j) == -1) return 0; 
        if(dp[i][j] != -1) return dp[i][j];
        
        int left = countPaths(i , j-1 , mat, dp);
        int up = countPaths(i-1 , j , mat, dp);
        return dp[i][j] = (left + up) % mod; //store answer % mod
  }
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
