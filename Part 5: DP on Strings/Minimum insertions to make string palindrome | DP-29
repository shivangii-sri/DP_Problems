************************************************************************************************************************************************************
Interesting - 
We solve Longest Palindromic Subsequence using -> Longest Common Subsequence
We solve Min Indertions to make string palindrome by -> Longest Palindromic Subsequence

Approach:
1. To find min insertions to make a string palindrome, we find what is the longest palindromic subsequence in it.
2. So that, we can keep longest palindromic subsequence intact, and we have to return only (string length - longest palindromic subseq length) insertions!

Eg. Given string = "abcaba"
Longest Palindromic Subsequence = "ababa" whose length = 5
So no. of insertions = 6 - 5 = 1 as "ab-cc-aba" 


Code Studio Solution below : 

************************************************************************************************************************************************************

#Tabulation Code

import java.util.*;
public class Solution {
    public static int minInsertion(String str) {
    	// Write your code here.
        return str.length() - longestPalindromeSubseq(str);
    }
    public static int longestPalindromeSubseq(String s) {
        int n = s.length();        
        StringBuilder t = new StringBuilder(s);
        String s2 = t.reverse().toString();
        
        return lcs( s , s2);
        
    }
    //Using Tabulation code of LCS
    public static int lcs(String s, String t) {
        //Your code goes here
        int len1 = s.length();
        int len2 = t.length();
        int dp[][] = new int[len1+1][len2+1];
      
        //1. Initialise
        for(int i=0; i<=len1; i++) dp[i][0] = 0;
        for(int j=0; j<=len2; j++) dp[0][j] = 0;
        
        //2. For loop
        for(int i=1; i<=len1 ; i++){
            for(int j=1; j<=len2; j++){
                
                //3. Copy recurrence
               //Match
                if(s.charAt(i-1) == t.charAt(j-1))
                    dp[i][j] = 1 + dp[i-1][j-1];
                //Not Match
                else dp[i][j] = 0 + Math.max( dp[i][j-1] , dp[i-1][j] ); //----------------------------------ELSE                    
            }
        }       
        return dp[len1][len2];
    }
}
************************************************************************************************************************************************************

Leetcode 1312.  Solution below : 

#1. Recursion
//recursion
//Tc = O(2^n x 2^n)
//SC = O(n) stack space
class Solution {
    public int minInsertions(String s) {
        int lps = lps(s);
        return s.length() - lps;
    }

    public int lps(String s1){
        StringBuilder sb = new StringBuilder(s1);
        String s2 = sb.reverse().toString();
        int n = s1.length();
        return helper(n, n, s1, s2);
    }
    public int helper(int i, int j, String s1, String s2){
        //base
        if(i == 0 || j==0){
            return 0;
        }
        if(s1.charAt(i-1) == s2.charAt(j-1)){
            return 1 + helper(i-1,j-1,s1,s2);
        }
        else{
            return Math.max( helper(i,j-1,s1,s2) , helper(i-1,j,s1,s2));
        }
    }
}

#2. Memo
//Tc = O(n x n)
//SC = O(n) stack space + O(n x n) dp[][]
class Solution {
    public int minInsertions(String s) {
        int lps = lps(s);
        return s.length() - lps;
    }

    public int lps(String s1){
        StringBuilder sb = new StringBuilder(s1);
        String s2 = sb.reverse().toString();
        int n = s1.length();

        int dp[][] = new int[n+1][n+1];
        for(int[] x : dp){
            Arrays.fill(x, -1);
        }
        return helper(n, n, s1, s2, dp);
    }
    public int helper(int i, int j, String s1, String s2, int[][] dp){
        //base
        if(i == 0 || j==0){
            return 0;
        }
        if(dp[i][j] != -1) return dp[i][j];

        if(s1.charAt(i-1) == s2.charAt(j-1)){
            return dp[i][j] = 1 + helper(i-1,j-1,s1,s2, dp);
        }
        else{
            return dp[i][j] = Math.max( helper(i,j-1,s1,s2, dp) , helper(i-1,j,s1,s2, dp));
        }
    }
}
