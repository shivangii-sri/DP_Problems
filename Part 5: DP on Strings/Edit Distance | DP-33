---------------------------------------------------------------------------------------------------------------------------------------------------------------
Leetcode Link : https://leetcode.com/problems/edit-distance/
---------------------------------------------------------------------------------------------------------------------------------------------------------------


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
#1 Recursion | TC = exponential | SC = O(n + m) stack space

class Solution {
    public int minDistance(String word1, String word2) {
        int n1 = word1.length();
        int n2 = word2.length();
        return helper(n1, n2, word1, word2);
    }    
    public int helper(int i, int j, String s, String t){
        //base
        if(i == 0) return j;
        if(j == 0) return i;
        
        if(s.charAt(i-1) == t.charAt(j-1)){
            return helper(i-1, j-1, s, t);
        }
        else{
            int insert = helper(i, j-1, s, t);
            int delete = helper(i-1, j, s, t);
            int replace = helper(i-1, j-1, s, t);            
            return 1 + Math.min(insert , Math.min(delete , replace));            
        }
    }
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
#2. Memoization | [By Shifting Index !] | TC = O(n x m) | SC = O(n + m) stack space + O(n x m) dp[][]

//Memo - by shifting index !
//TC = O(n x m)
//SC = O(n + m) stack space + O(n x m) dp[][]

class Solution {
    public int minDistance(String word1, String word2) {
        int n1 = word1.length();
        int n2 = word2.length();
        int dp[][] = new int[n1+1][n2+1];
        for(int[] x : dp){
            Arrays.fill(x , -1);
        }
        return helper(n1, n2, word1, word2, dp);
    }
    
    public int helper(int i, int j, String s, String t, int[][] dp){
        //base
        if(i == 0) return j;
        if(j == 0) return i;
        if(dp[i][j] != -1) return dp[i][j];
        
        if(s.charAt(i-1) == t.charAt(j-1)){
            return dp[i][j] = helper(i-1, j-1, s, t, dp);
        }
        else{
            int insert = helper(i, j-1, s, t, dp);
            int delete = helper(i-1, j, s, t, dp);
            int replace = helper(i-1, j-1, s, t, dp);            
            return dp[i][j] = 1 + Math.min(insert , Math.min(delete , replace));            
        }
    }
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
#3. Tabulation  | [By Shifting Index !] | TC = O(n x m) | SC =  O(n x m) dp[][]

//Tabu
//TC = O(n1 x n2)
//SC = O(n x m) dp[][]

class Solution {
    public int minDistance(String word1, String word2) {
        int n1 = word1.length();
        int n2 = word2.length();
        int dp[][] = new int[n1+1][n2+1];
        //initialisation
        for(int j=0; j<=n2; j++){
            dp[0][j] = j;
        }
        for(int i=0; i<=n1; i++){
            dp[i][0] = i;
        }
        
        for(int i=1; i<=n1; i++){
            for(int j=1; j<=n2; j++){
                if(word1.charAt(i-1) == word2.charAt(j-1)){
                    dp[i][j] = dp[i-1][j-1]; 
                }
                else{
                    int insert = dp[i][j-1];
                    int delete = dp[i-1][j]; 
                    int replace = dp[i-1][j-1];             
                    dp[i][j] = 1 + Math.min(insert , Math.min(delete , replace));            
                }
            }
        }
        return dp[n1][n2]; 
    }
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
#4. Space Optimization | [By Shifting Index !] | TC = O(n x m) | SC =  O(n x m) dp[][]
//Space
//TC = O(n1 x n2)
//SC = O(n2) dp[]

class Solution {
    public int minDistance(String word1, String word2) {
        int n1 = word1.length();
        int n2 = word2.length();
        int prev[] = new int[n2+1];
        //initialisation
        for(int j=0; j<=n2; j++){
            prev[j] = j;
        }
        // for(int i=0; i<=n1; i++){
        //     dp[i][0] = i;
        // }
        // prev[0] = 0;
        
        for(int i=1; i<=n1; i++){
            int cur[] = new int[n2+1];
            cur[0] = i;

            for(int j=1; j<=n2; j++){
                
                if(word1.charAt(i-1) == word2.charAt(j-1)){
                    cur[j] = prev[j-1]; 
                }
                else{
                    int insert = cur[j-1];
                    int delete = prev[j]; 
                    int replace = prev[j-1];             
                    cur[j] = 1 + Math.min(insert , Math.min(delete , replace));            
                }
            }
            prev = cur;
        }
        return prev[n2]; 
    }
}

