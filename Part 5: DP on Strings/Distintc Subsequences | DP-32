Leetcode Link : https://leetcode.com/problems/distinct-subsequences/

I did this Hard q by myself , faced real problem in SPace Opti, it was a bit tricky, had to print dp[][] array and analyzed whats wrong in space dp[][] and rectified!

***********************************************************************************
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
#1 Recursion //Recursion by shifting index !!!
//TC = O(2^n )
//SC = O(len of s1)

class Solution {
    public int numDistinct(String s, String t) {
        int i = s.length();
        int j = t.length();
        return helper(i, j, s, t);  
    }
    public int helper(int i, int j, String s, String t) {
        //base
        if(j == 0) return 1; //t has exhausted, we found t
        if(i == 0) return 0; //s exhausted , we did not find t

        if(s.charAt(i-1) == t.charAt(j-1)){
            return helper(i-1,j-1,s,t) + helper(i-1,j,s,t);
        }
        else {
            return helper(i-1, j, s, t);
        }
    }
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////                                                       
#2. Memoization of Shifting index | TC = O(Len1 x Len2) = No. of states | SC =O(max of (len1 , len2)) stack space + O(n * m) dp[][] space

class Solution {
    public int numDistinct(String s, String t) {
        int i = s.length();
        int j = t.length();
        int dp[][] = new int[i+1][j+1];
        for(int[] x : dp){
            Arrays.fill(x , -1);
        }
        return helper(i, j, s, t, dp);  
    }
    public int helper(int i, int j, String s, String t, int[][] dp) {
        //base
        if(j == 0) return 1; //t has exhausted, we found t
        if(i == 0) return 0; //s exhausted , we did not find t
        if(dp[i][j] != -1) return dp[i][j];

        if(s.charAt(i-1) == t.charAt(j-1)){
            return dp[i][j] = helper(i-1,j-1,s,t, dp) + helper(i-1,j,s,t, dp);
        }
        else {
            return dp[i][j] = helper(i-1, j, s, t, dp);
        }
    }
}
//   Meaning of dp[i = 1][j =0] ?
//     s = "b" , t = "" = 1
    
    
 ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#3. Tabulation of Shifting index |  TC = O(Len1 x Len2) = No. of states | SC = O(Len1 * len2) dp[][] space   

class Solution {
    public int numDistinct(String s, String t) {
        int n1 = s.length();
        int n2 = t.length();
        int dp[][] = new int[n1+1][n2+1];
        //initialisation
        //for j=0, initialise all the i's
        for(int i=0; i<=n1; i++){
            dp[i][0] = 1;
        }
        //for i=0, initialise all the j's
        for(int j=1; j<=n2; j++){
            dp[0][j] = 0;
        }
        
        for(int i=1; i<=n1; i++){
            for(int j=1; j<=n2; j++){
                
                 if(s.charAt(i-1) == t.charAt(j-1)){
                    dp[i][j] = dp[i-1][j-1] + dp[i-1][j]; 
                }
                else {
                    dp[i][j] = dp[i-1][j];  
                }
            }
        }       
        return dp[n1][n2];   
    }
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#4. Space Optimization of Shifting Index | TC = O(Len1 x Len2) = No. of states | SC = O(Len2) -> prev[] space
BIT TRICKY !!!!!!!

class Solution {
    public int numDistinct(String s, String t) {
        int n1 = s.length();
        int n2 = t.length();
        int prev[] = new int[n2+1];
        //initialisation
        // //for j=0, initialise all the i's
        // for(int i=0; i<=n1; i++){
        //     dp[i][0] = 1;
        // }
        prev[0] = 1;
        // //for i=0, initialise all the j's
        // for(int j=1; j<=n2; j++){
        //     dp[0][j] = 0;
        // }        
        for(int j=1; j<=n2; j++){
            prev[j] = 0;
        }
        
        System.out.println("done \n");
        
        for(int i=1; i<=n1; i++){
            int cur[] = new int[n2+1];
            
            for(int j=0; j<=n2; j++){
                
                if(j == 0){
                    cur[j] = 1;
                }
                else if(s.charAt(i-1) == t.charAt(j-1)){
                    cur[j] = prev[j-1] + prev[j]; 
                }
                else {
                    cur[j] = prev[j];  
                }
            }
            
            prev = cur;
        }       
        return prev[n2];   
    }
}    
