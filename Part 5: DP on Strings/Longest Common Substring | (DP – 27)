Problem Statement
Input  :  s1 = "abcjklp"  s2="acjkp"
Output : 3
Explanation : The longest common substring is "cjk" of length 3.

Leetcode Link for same problem for arrays (Maximum Length of Repeated Subarray) : https://leetcode.com/problems/maximum-length-of-repeated-subarray/
Code Studio Solution below.


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#3. Tabulation |  TC = O(Len1 x Len2) = No. of states   |    SC = O(Len1 * Len2) dp[][] space
==> Concept used :- "Shifitng Of Index"
==> All test cases passed!
// Approach : We  did a slight code-modification in Tabulation code of "Longest Common Subsequence"

public class Solution {
	public static int lcs(String str1, String str2) {
		// Write your code here.
        int len1 = str1.length();
        int len2 = str2.length();
        int dp[][] = new int[len1+1][len2+1];
      
        //1. Initialise
        for(int i=0; i<=len1; i++) dp[i][0] = 0;
        for(int j=0; j<=len2; j++) dp[0][j] = 0;
        
        int ans =0;
        //2. For loop
        for(int i=1; i<=len1 ; i++){
            for(int j=1; j<=len2; j++){
                
                //3. Copy recurrence
               //Match
                if(str1.charAt(i-1) == str2.charAt(j-1))
                    dp[i][j] = 1 + dp[i-1][j-1];  -----------check if prev char was matching.
                //Not Match
                else dp[i][j] = 0; --------------- for every non-match, we aassign 0.
                ans = Math.max(ans, dp[i][j]);
            }
        }       
        return ans;        
	}
}


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#4. Space Optimization | TC = O(Len1 x Len2) = No. of states   |   SC = O(Len2) -> prev[] space
==> All test cases passed!


import java.util.*;
public class Solution {
	public static int lcs(String str1, String str2) {
		// Write your code here.
        int len1 = str1.length();
        int len2 = str2.length();

      //int dp[][] = new int[len1+1][len2+1];
        int prev[] = new int[len2+1];        
      
        //1. Initialise
        Arrays.fill(prev , 0);
        //for(int i=0; i<=len1; i++) dp[i][0] = 0;
        /for(int j=0; j<=len2; j++) dp[0][j] = 0;
        
        int ans =0;
        //2. For loop
        for(int i=1; i<=len1 ; i++){
            int cur[] = new int[len2+1];
            for(int j=1; j<=len2; j++){
                
                //3. Copy recurrence
               //Match
                if(str1.charAt(i-1) == str2.charAt(j-1))
                    cur[j] = 1 + prev[j-1];
                //Not Match
                else cur[j] = 0;
                ans = Math.max(ans, cur[j]);
            }
            prev = cur;
        }       
        return ans;        
	}
}
