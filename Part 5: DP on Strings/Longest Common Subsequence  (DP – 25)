---------------------------------------------------------------------------------------------------------------------------------------------------------------
Question : Given two strings text1 and text2, return the length of their longest common subsequence. If there is no common subsequence, return 0.
Input  : s1 = "adebc" , s2 = "dcadb"   ----->   Output : 3
Explain: Both the strings contain a common subsequence 'adb', which is the longest common subsequence with length 3. 
---------------------------------------------------------------------------------------------------------------------------------------------------------------
Rules to Write:
1. Express in terms of (index1, index2).
    eg. f(2,5) signifies what is the LCS between str1 [0..2] and str2 [0..5]
2. Explore all possibilities on that index -: character of s1 and s2 can :-  Match or  Not-Match
3. Return max length.
---------------------------------------------------------------------------------------------------------------------------------------------------------------
Code Studio Solution.
---------------------------------------------------------------------------------------------------------------------------------------------------------------


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
#1 Recursion 
==> TC = O(2^n * 2^m) -> Exponential -> for subsequence of s1, we try to match every subsequence of s2. And generating subsequence takes 2^n TC
==> SC = O(n + m) -> Because we did alternate deletes, so there can be n deletes from s1 and m deletes from s2. (for s1="ab", s2="cd")

import java.util.*;
public class Solution {
	public static int lcs(String s, String t) {
		//Your code goes here
        int len1 = s.length();
        int len2 = t.length();
        return helper(len1-1 , len2-1, s, t);
    }    
    private static int helper(int i, int j, String s, String t){
        if(i<0 || j<0) return 0;
        
        //1. Match
        if(s.charAt(i) == t.charAt(j))
            return 1 + helper(i-1, j-1, s, t);
        //2. Not Match
        return 0 + Math.max(helper(i,j-1, s, t) , helper(i-1,j,s,t));
    }
}


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////                                                       
#2. Memoization | TC = O(Len1 x Len2) = No. of states | SC = O(n+m) aux stack space + O(n * m) dp[][] space

import java.util.*;
public class Solution {
    public static int lcs(String s, String t) {
	//Your code goes here
        int len1 = s.length();
        int len2 = t.length();
        int dp[][] = new int[len1][len2];
        for(int[] x : dp){
            Arrays.fill(x, -1);
        }
        return helper(len1-1 , len2-1, s, t, dp);
    }    
    private static int helper(int i, int j, String s, String t, int[][] dp){
        if(i<0 || j<0) return 0;
        if(dp[i][j] != -1) return dp[i][j];
        
        //Match
        if(s.charAt(i) == t.charAt(j))
            return dp[i][j] = 1 + helper(i-1, j-1, s, t, dp);
        //Not Match
        return dp[i][j] = 0 + Math.max(helper(i,j-1,s,t,dp) , helper(i-1,j,s,t,dp));
    }
}

************* MEMO By Shifting Index -> To be used in Tabulation **********************
import java.util.*;
public class Solution {

	public static int lcs(String s, String t) {
		//Your code goes here
        int len1 = s.length();
        int len2 = t.length();
        int dp[][] = new int[len1+1][len2+1];  ----------------------------------------CHANGE
        for(int[] x : dp){
            Arrays.fill(x, -1);
        }
        return helper(len1 , len2, s, t, dp);
    }
    
    private static int helper(int i, int j, String s, String t, int[][] dp){
        if(i== 0 || j == 0) return 0;  -------------------------------------------CHANGE
        if(dp[i][j] != -1) return dp[i][j];
        
        //Match
        if(s.charAt(i-1) == t.charAt(j-1))  -------------------------------------------CHANGE
            return dp[i][j] = 1 + helper(i-1, j-1, s, t, dp);
        //Not Match
        return dp[i][j] = 0 + Math.max(helper(i,j-1,s,t,dp) , helper(i-1,j,s,t,dp));
    }
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#3. Tabulation |  TC = O(Len1 x Len2) = No. of states | SC = O(Len1 * len2) dp[][] space
==> Shifitng Of Index

Tabulation Approach:
1. Copy the base case
2. Loop i,j
3. Copy Recursion logic

import java.util.*;
public class Solution {
	public static int lcs(String s, String t) {
		//Your code goes here
        int len1 = s.length();
        int len2 = t.length();
        int dp[][] = new int[len1+1][len2+1];
      
        //1. Initialise
        for(int i=0; i<=len1; i++) dp[i][0] = 0;
        for(int j=0; j<=len2; j++) dp[0][j] = 0;
        
        //2. For loop
        for(int i=1; i<=len1 ; i++){
            for(int j=1; j<=len2; j++){
                
                //3. Copy recurrence
               //Match
                if(s.charAt(i-1) == t.charAt(j-1))
                    dp[i][j] = 1 + dp[i-1][j-1];
                //Not Match
                else dp[i][j] = 0 + Math.max( dp[i][j-1] , dp[i-1][j] ); ----------------------------------ELSE                    
            }
        }       
        return dp[len1][len2];
    }
}


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#4. Space Optimization | TC = O(Len1 x Len2) = No. of states | SC = O(Len2) -> prev[] space
==> All test cases passed!

import java.util.*;
public class Solution {
	public static int lcs(String s, String t) {
		//Your code goes here
        int len1 = s.length();
        int len2 = t.length();
        int prev[] = new int[len2+1];
      
        //1. Initialise
        for(int i=0; i<=len1; i++) prev[0] = 0;
//         for(int j=0; j<=len2; j++) dp[0][j] = 0; //no need
        
        
        //2. For loop
        for(int i=1; i<=len1 ; i++){
            int cur[] = new int[len2 + 1];
            for(int j=1; j<=len2; j++){
                
                //3. Copy recurrence
               //Match
                if(s.charAt(i-1) == t.charAt(j-1))
                    cur[j] = 1 + prev[j-1];
                //Not Match
                else cur[j] = 0 + Math.max( cur[j-1] , prev[j] );                   
            }
            prev = cur;
        }       
        return prev[len2];
    }
}


