NOTE (IMP) : 
1. There's no link to solve this q separately. 
2. For practice, we will have to use the link of the q "Longest common subsequence" and we can verify there, if our code is working or not. 
3. For solving this, we need DP Array. 
4. So, as of right now, I dont know how to solve this q by recursion only. 
5. Here, I have used the tabulation code of the q "Longest common subsequence" and added some extra logic in it to print "LCS".

LeetCode Link : https://leetcode.com/problems/longest-common-subsequence/

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Tabulation 
==> TC = O(Len1 x Len2) for Tabu + O(Len1 + Len2) for printing bcz suppose in worst case, we have to move through all columns and all rows in dp table.   |<---

Approach:
1. We compute dp table to find LCS.
2. Now, for printing, we travel in dp table from last cell (i=n, j=m)
3. If there is a match of character in s1 and s2 at index i and j, we will append the char into out ans.
4. If not match, we find which has max value dp[i-1][j] or dp[i][j-1] and simply move either i or j to previous.
5. We stop if any of i or j becomes equal to 0.
6. return ans.

import java.util.*;
public class Solution {
	public static int lcs(String s, String t) {
		//Your code goes here
        int len1 = s.length();
        int len2 = t.length();
        int dp[][] = new int[len1+1][len2+1];
      
        //1. Initialise
        for(int i=0; i<=len1; i++) dp[i][0] = 0;
        for(int j=0; j<=len2; j++) dp[0][j] = 0;
        
        //2. For loop
        for(int i=1; i<=len1 ; i++){
            for(int j=1; j<=len2; j++){
                
                //3. Copy recurrence
               //Match
                if(s.charAt(i-1) == t.charAt(j-1))
                    dp[i][j] = 1 + dp[i-1][j-1];
                //Not Match
                else dp[i][j] = 0 + Math.max( dp[i][j-1] , dp[i-1][j] ); ----------------------------------ELSE                    
            }
        }       
       
       //from here Printing of lcs logic is implemented 
        
        int tempLen = dp[len1][len2]; // this value contains the answer  i.e length of longest lcs.
        int i=len1;
        int j=len2;
        
        int index=tempLen-1;
        String str="";
        
        for(int k=1;k<=tempLen;k++){
            str+="$";
        }
    
        StringBuilder str2=new StringBuilder(str);
        
        while(i>0 && j>0){
            
            if(s.charAt(i-1)== t.charAt(j-1)){  
                str2.setCharAt(index,s.charAt(i-1));
                index--;
                i--;
                j--;
            }
            else if(ss.charAt(i-1) > text2.charAt(j-1)){
                i--;
            }
            else j--;
        }
        
        System.out.println(str2);
        
        
        return dp[len1][len2];
    }
}
