Problem LinkCode studio : https://www.codingninjas.com/codestudio/problems/frog-jump_3621012?source=youtube&campaign=striver_dp_videos&utm_source=youtube&utm_medium=affiliate&utm_campaign=striver_dp_videos

 RECURSION TREE IMAGE BELOW :
![image](https://user-images.githubusercontent.com/66727290/178331204-ba3953ce-7204-4a5f-97f7-a3d4c216235c.png)

******************************************************************************************************************************************************************

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
I have done in two ways : Method 1 - Recursion top down , Method 2 - Recursion bottom up


************************* Method 1 - Recursion top down ******************************
#1 Recursion | TC =O(2^N)  ,  SC = O(N) - recursive stack space | TOP-DOWN Approach

    public static int frogJump(int n, int heights[]) {        
          return helper(n-1, heights);
    }
     public static int helper(int n, int[] heights){
        if(n == 0) {
            return 0;
        }
        if(n < 0) return Integer.MAX_VALUE;

        int oneStepBackEnergy = Integer.MAX_VALUE;
        if(n-1 >= 0) oneStepBackEnergy = Math.abs(heights[n] - heights[n-1]) + helper(n-1, heights);
        int twoSteBackEnergy = Integer.MAX_VALUE;
        if(n-2 >= 0) twoSteBackEnergy = Math.abs(heights[n] - heights[n-2]) + helper(n-2, heights);

        return  Math.min(oneStepBackEnergy , twoSteBackEnergy);
    }
    

#2. Memoization | TC = O(N) | SC = O(2N)- stack space and dp array | TOP-DOWN Approach:  from index n 
public class Solution {
    public static int frogJump(int n, int heights[]) {
        // Recursion
        int dp[] = new int[n];
        Arrays.fill(dp , -1);
        return helper(heights, n-1, dp);
    }
    public static int helper(int[] heights, int n, int dp[]){
        if(n == 0) {
            return 0;
        }
        if(n < 0) return Integer.MAX_VALUE;
        if(dp[n] != -1) return dp[n];

        int oneStepBackEnergy = Integer.MAX_VALUE;
        if(n-1 >= 0) oneStepBackEnergy = Math.abs(heights[n] - heights[n-1]) + helper(heights, n-1, dp);
        int twoSteBackEnergy = Integer.MAX_VALUE;
        if(n-2 >= 0) twoSteBackEnergy = Math.abs(heights[n] - heights[n-2]) + helper(heights, n-2, dp);
        
        return dp[n] = Math.min(oneStepBackEnergy , twoSteBackEnergy);
    }
}

#3 Tabulation | TC=O(N) | SC=O(N) -> dp[] and no stack space |
public class Solution {
    public static int frogJump(int n, int heights[]) {
        
        int dp[] = new int[n];
        //Initialise
        dp[0] = 0;

        for(int i=1; i<n; i++){
            int oneStepBackEnergy = Integer.MAX_VALUE;
            int twoSteBackEnergy = Integer.MAX_VALUE;
            if(i-1 >= 0) oneStepBackEnergy = Math.abs(heights[i] - heights[i-1]) +  dp[i-1];       
            if(i-2 >= 0) twoSteBackEnergy = Math.abs(heights[i] - heights[i-2]) + dp[i-2];

            dp[i] = Math.min(oneStepBackEnergy, twoSteBackEnergy);
        }
        return dp[n-1];
    }
}



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
************************* Method 2 - Recursion bottom up ******************************

#1 Recursion | TC =O(2^N)  ,  SC = O(N) - recursive stack space
Approach :
1. We explore taking all possible paths, starting with index 0.
2. At every index, we can take either 1 or 2 steps.
3. for i=0-> we call f(1) and f(2). f(1) and f(2) returns us the cost of reaching end from 1 and 2 index respectively. 
   Thus we also add cost of recahing 0->1 and 0->2 on the naswers returned. NOTE: we take care of boundaries of i+2 index. it might go beyond range.
4. We return min of f(1) and f(2) calls.   

public class Solution {
    public static int frogJump(int n, int heights[]) {
        // Write your code here..
        return util( 0  ,heights);       
    }
    private static int util(int idx , int[] h){
        //base case
        //when reach n-1 index, we got our path.
        if(idx==h.length-1) {
            return 0;
         }
        if(idx >= h.length) return Integer.MAX_VALUE; //no possible path, so return extremely large cost which will never be considered.
       
        int step1 = util(idx+1 , h) + Math.abs(h[idx] - h[idx+1]);        
        int step2 = util(idx+2 , h);
        if(idx+2 < h.length) step2+= Math.abs(h[idx] - h[idx+2]);
        
        return Math.min(step1,step2);
    }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#2. Memoization | TC = O(N) | SC = O(2N)- stack space and dp array

****************************** from index 0 ******************************
import java.util.*;
public class Solution {
    public static int frogJump(int n, int heights[]) {
        int dp[] = new int[heights.length + 1];
        Arrays.fill(dp , -1);
        return util( 0  ,heights, dp);
     }
    private static int util(int idx , int[] h, int[] dp){
        //base case
        if(dp[idx] !=-1) return dp[idx];
        //when reach n-1 index, we got our path.
        if(idx==h.length-1) {
            dp[idx] = 0;
            return 0;
         }
        if(idx >= h.length) return dp[idx] = Integer.MAX_VALUE; //no possible path, so return extremely large cost which will never be considered.
       
        int step1 = util(idx+1 , h, dp) + Math.abs(h[idx] - h[idx+1]);        
        int step2 = util(idx+2 , h , dp);
        if(idx+2 < h.length) step2+= Math.abs(h[idx] - h[idx+2]);
        
        return dp[idx] = Math.min(step1,step2);
    }
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Tabulation | TC=O(N) | SC=O(N) -> dp[] and no stack space |

import java.util.*;
public class Solution {
    public static int frogJump(int n, int heights[]) {
     
        int dp[] = new int[n + 1];
        
        //1. initialize
        dp[n] = Integer.MAX_VALUE;
        dp[n-1] = 0;
        
        // NOTE : In Tabulation, dp[] is always filled up in OPPosite direction to that of Memoization. In memo, i took bottom up, so now in tabulation, take top-down.
        for(int i=n-2; i >= 0 ; i--){
            int step1 = dp[i+1] + Math.abs(heights[i] - heights[i+1]);
            int step2 = dp[i+2];
            if(i+2 < n) step2 += Math.abs(heights[i] - heights[i+2]);
            dp[i] = Math.min(step1, step2);
        }
        return dp[0];
     }
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Space optimize | SC =O(1) | TC=O(N) |

import java.util.*;
public class Solution {
    public static int frogJump(int n, int heights[]) {
        // 1. initialize
        // dp[n] = Integer.MAX_VALUE;
        // dp[n-1] = 0;        
        int len = Integer.MAX_VALUE;
        int prevLen = 0;
        
        //i+1 => prevLen
        //i+2 => len
        for(int i=n-2; i >= 0 ; i--){
            int step1 = prevLen + Math.abs(heights[i] - heights[i+1]);
            int step2 = len;
            if(i+2 < n) step2 += Math.abs(heights[i] - heights[i+2]);
            int curi = Math.min(step1, step2);
            
            len = prevLen;
            prevLen = curi;
        }
        return prevLen;
     }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
