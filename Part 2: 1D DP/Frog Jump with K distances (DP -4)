Leetcode link : https://leetcode.com/problems/jump-game-vi/

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#1 Recursion | TC =O(2^N)  ,  SC = O(N) - recursive stack space | TOP-DOWN Approach --giving TLE

class Solution {
    public int maxResult(int[] nums, int k) {
        return helper(nums.length-1 , nums, k);
    }
    
    public int helper(int n, int[] nums, int k){
        if(n == 0) {
            return nums[0];
        }        
        if(n < 0) return Integer.MIN_VALUE;
        
        int ans = Integer.MIN_VALUE;
        for(int step=1; step<=k ; step++){
            if(n-step >= 0)
            ans = Math.max( ans,  nums[n] + helper(n-step, nums, k) );                   
        }
        return ans;
    }
}


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#2. Memoization | TC = O(N) | SC = O(2N)- stack space and dp array --giving TLE


class Solution {
    public int maxResult(int[] nums, int k) {
        int n = nums.length;
        
        int dp[] = new int[n];
        Arrays.fill(dp , -1);
        
        return helper(n-1 , nums, k, dp);
    }    
    public int helper(int n, int[] nums, int k, int[] dp){
        if(n == 0) {
            return nums[0];
        }        
        if(dp[n] != -1) return dp[n];        
        if(n < 0) return 0; //changes here
        int ans = Integer.MIN_VALUE;
        for(int step=1; step<=k ; step++){
            if(n-step >= 0)
            ans = Math.max( ans,  nums[n] + helper(n-step, nums, k, dp) );                   
        }
        return dp[n] = ans;
    }
}

