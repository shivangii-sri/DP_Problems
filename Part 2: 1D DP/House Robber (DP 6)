//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    
Question : 
A thief needs to rob money in a street. The houses in the street are arranged in a circular manner. Therefore the first and the last house are adjacent to each other. 
The security system in the street is such that if adjacent houses are robbed, the police will get notified. 
Given an array of integers “Arr” which represents money at each house, we need to return the maximum amount of money that the thief can rob without alerting the police.

Pre-req: Maximum Sum of non-adjacent elements

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    

**************** Striver Code - Space Optimization ****************
Approach:
1. We use the same code as " Maximum Sum of non-adjacent elements" to find the max sum of non-adjacent subsequence - one excluding 0 index, one excluding last index.
   because these two for sure cannot be taken together.
2. We return max of these two.


public class Solution {
    public static long houseRobber(int[] valueInHouse) {
        int n = valueInHouse.length; 
        if(n == 1) return valueInHouse[0];
        
        List<Integer> temp1 = new ArrayList<>();   
        List<Integer> temp2 = new ArrayList<>();
        
        //Create two lists - one excluding 0 index, one excluding last index.
        for(int i=0; i<n ; i++){
            if(i!= 0) temp1.add(valueInHouse[i] );
            if(i!= n-1) temp2.add(valueInHouse[i]);    
        }
        return Math.max(maximumNonAdjacentSum(temp1) , maximumNonAdjacentSum(temp2));
        
    }
    private static long maximumNonAdjacentSum(List<Integer> nums){
        //Space Optimization code for Maximum sum of non-adjacent elements (DP 5)
         int n = nums.size();          
         //initialize
         //dp[0] = nums.get(0);
     
         long prev = nums.get(0); 
         long prev2 = 0; //or prev2  = prev - >what i did and this also works;
                 
         for(int i=1 ; i<=n-1; i++){
             long pick = nums.get(i); 
             if(i>1) pick += prev2;
             
             long notpick = 0 + prev;             
             
             long curi = Math.max(pick, notpick);
             
             prev2 = prev;
             prev = curi;
         }
         return prev;
    }
}

Time Complexity = O(N)
Space Complexity = O(1)

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////  
Solution 1 : Recursion (Will give TLE) | TC=O(2^N) | SC = O(N) (Space for recursive call stack )

Approach:
1. To find the max amount to rob, Start from index n-1. Note: last index is adjacent to 0 index, circular way.
2. At every index, we can either pick it or not pick it in our subsequence.
    a. if we pick, we add arr[n] and call for f(n-2) , since we have to avoid adjacent.
    b. if we do not pick, we add 0 and call for f(n-1)
    c. we have to take care about not picking 0th index simultaneously with last index. i have taken care of it using a boolean variable.
3. But hey, when you want to convert it into dp[] , not possible. Eg. f(2) will have answer stored when last=true and will return saem even for last=false;
So, recursion is ok, but dp idk.

eg. a[] = [1, 5, 1, 2, 6] , n=5

  (.. + 6) <- f(4) -> (0 + ..)
         
         f(2)     f(3)
      
    f(0)   f(1)    .........    

---------------My Code------------
public class Solution {	
    public static long houseRobber(int[] valueInHouse) {
          int n = valueInHouse.length;
          boolean last = false; 
          return helper(n-1 , valueInHouse , last);        
    }
    
    private static long helper(int idx , int[] arr , boolean last){
        if(idx == 0){
            if(last == true) return 0; //cant take bcz adjacent to last
            else return arr[idx];
        }
        if(idx < 0 ) return 0; //not to consider
        
        long pick = 0;
        if(idx == arr.length-1) {
            last = true;
            pick = arr[idx] + helper(idx - 2 , arr, last);
            last = false;
        }
        else{
            pick = arr[idx] + helper(idx - 2 , arr, last);   
        }
        long notpick = 0 + helper(idx-1 , arr, last);
        return Math.max(pick , notpick);
    }
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
