////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#1 Recursion | TC =O(2^N)  ,  SC = O(N * N-2) - recursive stack space

public class Solution {
	public static int maximumNonAdjacentSum(ArrayList<Integer> nums) {
        int n = nums.size();       
        return helper(nums, n-1 );
	}
  private static int helper(ArrayList<Integer> nums, int n){
       //base case
       if(n==0 || n==1) return nums.get(n);
       // maxi[0] = 0;
       int prev = helper(nums , n-1); ////////////////////////////
            int maxi = 0;
            if(n-2 >= 0){
                for(int i=n-2 ; i>=0 ; i--){
                    int temp = helper(nums, i );
                    maxi = Math.max(maxi , temp);
                }
            }
        return Math.max(prev , nums.get(n) + maxi); /////////////////////
    }
}

********************SUD Code**********************

public class Solution {
  public static int maximumNonAdjacentSum(ArrayList<Integer> nums) {
        int n=nums.size();      
        int result=Math.max(solUtil(n-1,nums),solUtil(n-2,nums));
        return result;
   }    
    public static int solUtil(int n,ArrayList<Integer> nums){
        
        if(n==0 || n==1) return nums.get(n);
        
        int maxi=0;
        
        for(int i=n-2;i>=0;i--){
            
            maxi=Math.max(nums.get(n)+solUtil(i,nums),maxi);
        }        
        return maxi;
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
