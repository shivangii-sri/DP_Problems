
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#1 Recursion | TC = O(2^N)  ,  SC = O(N * N-2) - recursive stack space

********************Striver Code**********************
Approach: 
1. Start with last index of array.
2. We have two options to avoid taking adjacent elements in our subsequence
	a. either we pick current index and then move to n-2th index.
	b. or we do not pick the current index and move to n-1th index.
3. Note- index 1 cannot be our base case, bcz at 1, we have two choices to get our answer-> take maximum between 1th and 0th index. Works fine in recursion calls.
4. Base cases : 
	a. at n==0, we return a[0]
	b. at n<0 , we return 0 because such index is out of range, so do not consider.
	c. Also works, but havent included ->  if(n==1) return Math.max(nums.get(0) , nums.get(1));
5. Return max of pick and notpick.

import java.util.*;
public class Solution {
     public static int maximumNonAdjacentSum(ArrayList<Integer> nums) {       
         return f(nums.size() - 1 , nums);
     }    
    private static int f(int n , ArrayList<Integer> nums){
        if(n == 0) return nums.get(0);
        if(n < 0) return 0;
        
        int pick    = nums.get(n) + f(n-2 , nums);
        int notpick =    0        + f(n-1 , nums);
        return Math.max(pick , notpick);
    }
}

*******************My Code*******************
public class Solution {
	public static int maximumNonAdjacentSum(ArrayList<Integer> nums) {
        int n = nums.size();       
        return helper(nums, n-1 );
	}
  private static int helper(ArrayList<Integer> nums, int n){
       //base case
       if(n==0 || n==1) return nums.get(n);
       // maxi[0] = 0;
       int prev = helper(nums , n-1); ----------------------------
            int maxi = 0;
            if(n-2 >= 0){
                for(int i=n-2 ; i>=0 ; i--){
                    int temp = helper(nums, i );
                    maxi = Math.max(maxi , temp);
                }
            }
        return Math.max(prev , nums.get(n) + maxi);------------------
    }
}

********************SUD Code**********************

public class Solution {
  public static int maximumNonAdjacentSum(ArrayList<Integer> nums) {
        int n=nums.size();      
        int result=Math.max(solUtil(n-1,nums),solUtil(n-2,nums));
        return result;
   }    
    public static int solUtil(int n,ArrayList<Integer> nums){
        
        if(n==0 || n==1) return nums.get(n);
        
        int maxi=0;
        
        for(int i=n-2;i>=0;i--){
            
            maxi=Math.max(nums.get(n)+solUtil(i,nums),maxi);
        }        
        return maxi;
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#2. Memoization | TC = O(N) | SC = O(2N)- stack space and dp array

***************Striver Code*****************
public class Solution {
     public static int maximumNonAdjacentSum(ArrayList<Integer> nums) {  
         int[] dp = new int[nums.size()];
         Arrays.fill(dp , -1);
         return f(nums.size() - 1 , nums, dp);
     }    
    private static int f(int n , ArrayList<Integer> nums, int[] dp){
        if(n == 0) return nums.get(0);
        if(n < 0) return 0;
        if(dp[n] != -1) return dp[n];
        
        int pick    = nums.get(n) + f(n-2 , nums , dp);
        int notpick =    0        + f(n-1 , nums , dp);
        return dp[n] = Math.max(pick , notpick);
    }
}

****************My Code*****************
public class Solution {
   public static int maximumNonAdjacentSum(ArrayList<Integer> nums) {
        int n = nums.size();       
        int dp[] = new int[n+1];
        Arrays.fill(dp , -1);
        
        return helper(nums, n-1 , dp);
   }
    private static int helper(ArrayList<Integer> nums, int n , int[] dp){
        //base case
        if(n==0 || n==1) return nums.get(n);
        if(dp[n] != -1) return dp[n];
        
       // maxi[0] = 0;
        int prev = helper(nums , n-1, dp); ////////////////////////////
            int maxi = 0;
            if(n-2 >= 0){
                for(int i=n-2 ; i>=0 ; i--){
                    int temp = helper(nums, i , dp);
                    maxi = Math.max(maxi , temp);
                }
            }
        return dp[n] = Math.max(prev , nums.get(n) + maxi); /////////////////////
    }
}

*****************SUD COde********************
import java.util.*;
public class Solution {
 public static int maximumNonAdjacentSum(ArrayList<Integer> nums) {
  // Write your code here.
        
        int n=nums.size();
        
        if(n==1) return nums.get(0);

        int[] dp=new int[n+1];
        
        Arrays.fill(dp,-1);
 
        int result=Math.max(solUtil(n-1,nums,dp),solUtil(n-2,nums,dp));

        return result;
 }
    
    public static int solUtil(int n,ArrayList<Integer> nums,int[] dp){
        if(n==0) return nums.get(0);
        if(n==1) return nums.get(1);
        
        if(dp[n]!=-1) return dp[n];

        dp[0]=nums.get(0);
        dp[1]=nums.get(1);
        
        int maxi=0;
        
        for(int i=n-2;i>=0;i--){
            
            maxi=Math.max(nums.get(n)+solUtil(i,nums,dp),maxi);
        }
        
        return dp[n]=maxi;
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Tabulation | TC =O(N) | SC = O(N) - dp array

**************Striver Tabulation**************
public class Solution {
     public static int maximumNonAdjacentSum(ArrayList<Integer> nums) { 
         int n = nums.size();
         if(n==1) return nums.get(0); //edge case for size 1        
         
         int[] dp = new int[n];
         //initialize
         dp[0] = nums.get(0);
                 
         for(int i=1 ; i<=n-1; i++){
             int pick = nums.get(i); if(i>1) pick += dp[i-2];
             int notpick = 0 + dp[i-1];             
             dp[i] = Math.max(pick, notpick);
         }
         return dp[n-1];
     }    
}

***********I did tabulation on Striver Memo******** -> I initialized dp[1] also. However, Striver included check condtion in the for loop itsef.
public class Solution {
     public static int maximumNonAdjacentSum(ArrayList<Integer> nums) { 
         int n = nums.size();
         if(n==1) return nums.get(0); //edge case for size 1        
         
         int[] dp = new int[n];
         //initialize
         dp[0] = nums.get(0);
         dp[1] = Math.max(nums.get(0) , nums.get(1));
         
         for(int i=2 ; i<=n-1; i++){
             int pick = nums.get(i) + dp[i-2];
             int notpick = 0 + dp[i-1];             
             dp[i] = Math.max(pick, notpick);
         }
         return dp[n-1];
     }    
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Space Optimization | TC =O(N) | SC = O(1) 

***********Striver Code **************
public class Solution {
     public static int maximumNonAdjacentSum(ArrayList<Integer> nums) { 
         int n = nums.size();
         if(n==1) return nums.get(0); //edge case for size 1        
         
	 //initialize
	 //dp[0] = nums.get(0);
	 
         int prev = nums.get(0); 
         int prev2 = 0; //or prev2  = prev - >what i did and this also works;
                 
         for(int i=1 ; i<=n-1; i++){
             int pick = nums.get(i); if(i>1) pick += prev2;
             int notpick = 0 + prev;             
             int curi = Math.max(pick, notpick);
             
             prev2 = prev;
             prev = curi;
         }
         return prev;
     }    
}

