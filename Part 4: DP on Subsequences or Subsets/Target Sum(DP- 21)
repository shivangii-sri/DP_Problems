*********************************************************************************************************************************************************************
Leetcode 494. Target Sum

Question :- You are given an integer array nums and an integer target.
You want to build an expression out of nums by adding one of the symbols '+' and '-' before each integer in nums and then concatenate all the integers.
For example, if nums = [2, 1], you can add a '+' before 2 and a '-' before 1 and concatenate them to build the expression "+2-1".
Return the number of different expressions that you can build, which evaluates to target.

Did Only Memo Code.

*********************************************************************************************************************************************************************

Approach:
1. To find the no. of ways to build expression, we want to find all pairs of subset sums s1, s2 such that s1-s2=target
2. So we use the code of "Count Partitions with Given Difference (DP – 18)" where we modify the difference to target.
3.  "Count Partitions with Given Difference (DP – 18)" in turn uses "Count Subsets with Sum K (DP – 17)"

//MEMO Code

import java.util.*;
public class Solution {
    public static int targetSum(int n, int target, int[] arr) {
    	// Write your code here.
        return countPartitions(n, target, arr);
        
    }
   public static int countPartitions(int n, int d, int[] arr) {
        // Main function of Count Partitions with Given Difference 
        int tot=0; //total sum
        for(int e  : arr){
             tot += e;
        }
        if((tot - d < 0) || ((tot-d) % 2 != 0)) return 0;
        return countSubsetsWithSumK(arr, (tot-d)/2); //helper function for this 
    }
    
   public static int countSubsetsWithSumK(int num[], int tar) {      
        //count how many subsets with sum == target
        int dp[][] = new int[num.length][tar+1];
        for(int[] x : dp){
            Arrays.fill(x, -1);
        }
        return helper(num.length - 1, tar , num , dp);
    }      
    private static int helper(int i, int sum, int[] a, int[][] dp){
        //base
//         if(sum == 0){
//             return dp[i][sum]=1;
//         }
        if(i == 0) {            
            if(sum==0 && a[0]==0) return 2;          
            if(sum==0 || sum==a[0]) return 1;            
            return 0;        
        }
        if(dp[i][sum] != -1) return dp[i][sum];
        
        int notPick = helper(i-1, sum, a, dp); 
        int pick = 0;
        if(a[i] <= sum) pick = helper(i-1, sum - a[i], a, dp);      
        return dp[i][sum] = (pick + notPick) ;
    } 
}
