//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
#1 Recursion | TC = Exponential bcz same index can be picked unlimited times  |    SC= O(target) -> aux stack space -> like for arr[]= [1] and tar=5, we have cnt=5 
=> Gives TLE

Approach:
1. Start from last index, with target given.
2. We have two choices- 
  a. if we can pick element, we stay at same index and check again if we can pick it.
  b. not pick and move to prev index.
3. NOTE: if we pick an element , cnt incr by 1
         if we dont pick an element, add 0 as count.

import java.util.*;
public class Solution {
    static int mod = (int)1e9+7;
    
    public static int minimumElements(int num[], int x) {
        // Write your code here..
        int n = num.length;
        int ans =  helper(n-1, x, num);
        if(ans == 147483633 || ans == 2147483647) return -1; //wrote from error-testcases.
        else return ans;
    }
    // Fucntion to return min count
    private static int helper(int i, int tar, int[] a){
        //base
        if(i == 0){
            if(tar % a[0] == 0) return tar/a[0];
            else return Integer.MAX_VALUE;
        }
        
        int notpick = 0 + helper(i-1, tar, a); // count is 0 fro notpick
        int pick = Integer.MAX_VALUE; // count increases by 1 for pick
        if(a[i] <= tar) pick = (1 + helper(i , tar - a[i] , a)%mod );
        
        return Math.min(notpick , pick) % mod;
    }
}


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                        
#2. Memoization | TC = O(N x Target) = No. of states    |     SC= O(Target) aux stack space  +  O(N x Target) dp[][] space


import java.util.*;
public class Solution {
    //memo
    static int mod = (int)1e9+7;
    
    public static int minimumElements(int num[], int x) {
        // Write your code here..
        int n = num.length;
        int dp[][] = new int[n][x+1];
        for(int[] e : dp){
            Arrays.fill(e , -1);
        }
        int ans =  helper(n-1, x, num, dp);
        if(ans == 147483633 || ans == 2147483647) return -1;
        return ans;
    }
    // Fucntion to return min count
    private static int helper(int i, int tar, int[] a, int[][] dp){
        //base
        if(i == 0){
            if(tar % a[0] == 0) return tar/a[0];
            else return Integer.MAX_VALUE;
        }
        if(dp[i][tar] != -1) return dp[i][tar];
        
        int notpick = 0 + helper(i-1, tar, a, dp);
        int pick = Integer.MAX_VALUE;
        if(a[i] <= tar) pick = (1 + helper(i , tar - a[i] , a, dp)%mod );
        
        return dp[i][tar] = Math.min(notpick , pick) % mod;
    }
}


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#3. Tabulation | TC = O(N x Tar) to compute these states |  SC= O(N x Tar) dp[][] space , no aux stack space
GIVING ERROR


import java.util.*;
public class Solution {
    //Tabu
    static int mod = (int)1e9+7;
    
    public static int minimumElements(int num[], int x) {
        // Write your code here..
        int n = num.length;
        
        int dp[][] = new int[n][x+1];
        //Initialise base cases
        // fill first colm with 0
        for(int i=0; i<n; i++){
            dp[i][0] = 0;
        }
        //initialise first row
        for(int i=1 ; i<=x; i++){
            if(i % num[0] == 0){
                dp[0][i] = x / num[0];
            }
            else{
                dp[0][i] = Integer.MAX_VALUE;
            }
        }
        
        for(int i=1; i<n; i++){
            for(int tar=1; tar<=x; tar++){
                
                int notpick = 0 + dp[i-1][tar];
                int pick = Integer.MAX_VALUE;
                if(num[i] <= tar) pick = 1 + (dp[i][tar - num[i]])%mod ;
                dp[i][tar] = Math.min(notpick , pick) % mod;
            }
        }
        
        int ans =  dp[n-1][x];
        if(ans == 147483633 || ans == 2147483647) return -1;
        return ans;
    }
}
