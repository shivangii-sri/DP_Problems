Leetcode Problem - 322. Coin Change
Question :- You are given an integer array coins representing coins of different denominations and an integer amount representing a total amount of money.
Return the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1.
You may assume that you have an infinite number of each kind of coin.

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
#1 Recursion | TC = Exponential bcz same index can be picked unlimited times  |    SC= O(target) -> aux stack space -> like for arr[]= [1] and tar=5, we have cnt=5 
=> Gives TLE

Approach:
1. Start from last index, with target given.
2. We have two choices- 
  a. if we can pick element, we stay at same index and check again if we can pick it.
  b. not pick and move to prev index.
3. NOTE: if we pick an element , cnt incr by 1
         if we dont pick an element, add 0 as count.

import java.util.*;
public class Solution {
    static int mod = (int)1e9+7;
    
    public static int minimumElements(int num[], int x) {
        // Write your code here..
        int n = num.length;
        int ans =  helper(n-1, x, num);
        if(ans == 147483633 || ans == 2147483647) return -1; //wrote from error-testcases.
        else return ans;
    }
    // Fucntion to return min count
    private static int helper(int i, int tar, int[] a){
        //base
        if(i == 0){
            if(tar % a[0] == 0) return tar/a[0];
            else return Integer.MAX_VALUE;
        }
        
        int notpick = 0 + helper(i-1, tar, a); // count is 0 fro notpick
        int pick = Integer.MAX_VALUE; // count increases by 1 for pick
        if(a[i] <= tar) pick = (1 + helper(i , tar - a[i] , a)%mod );
        
        return Math.min(notpick , pick) % mod;
    }
}


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                        
#2. Memoization | TC = O(N x Target) = No. of states    |    SC = O(n) aux stack space  + O(n x target)

class Solution {
    public int coinChange(int[] coins, int amount) {
        int n = coins.length;
        int dp[][] = new int[n][amount+1];
        for(int[] x : dp){
            Arrays.fill(x , -1);
        }        
        int ans = helper(n - 1, amount, coins, dp) ; 
        return (ans == (int)Math.pow(10,9) ) ? -1 : ans;        
    }
    
    //helper to return min count of coins
    public int helper(int i, int target, int[] coins, int[][] dp){
        //if(target == 0) return 0; //not necessary!
        if(i == 0){
            if(target%coins[0] == 0) return target/coins[0];
            else return (int)Math.pow(10,9);
        }
        if(dp[i][target] != -1) return dp[i][target];
        
        //not pick
        int notpick = 0 + helper(i-1, target, coins, dp);
        int pick = (int)Math.pow(10,9);
        if(coins[i] <= target) pick = 1 + helper(i, target - coins[i], coins, dp);
        
        return dp[i][target] = Math.min(pick , notpick);
    }
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#3. Tabulation | TC = O(N x Tar) to compute these states |  SC= O(N x Tar) dp[][] space , no aux stack spac

class Solution {
    public int coinChange(int[] coins, int amount) {
        int n = coins.length;
        int dp[][] = new int[n][amount+1];
        //Initialisation
        for(int target=0; target<=amount; target++){
            if(target%coins[0] == 0) dp[0][target] = target/coins[0];
            else dp[0][target] = (int)Math.pow(10,9);
        }
        
        for(int i=1; i<n; i++){
            for(int target=0; target<=amount; target++){
                //not pick
                int notpick = 0 + dp[i-1][target];
                int pick = (int)Math.pow(10,9);
                if(coins[i] <= target) pick = 1 + dp[i][target-coins[i]]; 

                dp[i][target] = Math.min(pick , notpick);
            }
        }        
        int ans = dp[n-1][amount] ; 
        return (ans == (int)Math.pow(10,9) ) ? -1 : ans;        
    }
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#4. Space | TC = O(N x Tar) to compute these states |  sc = O(target) dp array space

class Solution {
    public int coinChange(int[] coins, int amount) {
        int n = coins.length;
        
        int prev[] = new int[amount+1];
        //Initialisation
        for(int target=0; target<=amount; target++){
            if(target%coins[0] == 0) prev[target] = target/coins[0];
            else prev[target] = (int)Math.pow(10,9);
        }
        
        for(int i=1; i<n; i++){
            int cur[] = new int[amount+1];
            for(int target=0; target<=amount; target++){
                //not pick
                int notpick = 0 + prev[target];
                int pick = (int)Math.pow(10,9);
                if(coins[i] <= target) pick = 1 + cur[target-coins[i]]; 

                cur[target] = Math.min(pick , notpick);
            }
            prev = cur;
        }        
        int ans = prev[amount] ; 
        return (ans == (int)Math.pow(10,9) ) ? -1 : ans;        
    }
}
