***********************************************************************************************************************************************************
Rod cutting problem | Code Studio Problem
Problem Statement :- Given a rod of length ‘N’ units. The rod can be cut into different sizes and each size has a cost associated with it. 
Determine the maximum cost obtained by cutting the rod and selling its pieces.

Pattern:-
1. Express in (index, N=rod length)
2. Explore all possibilities - pick and not pick
3. Return max of (pick or not_pick) 

Code Studio soln below.
***********************************************************************************************************************************************************

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
HERE IS THE SET OF MY APPROACH - Almost same, just passing index as n=5, instead of n-1=4 in case of Striver.

#1 Recursion | TC = Exponential bcz we can pick infinite no. of times   |    SC= O(Rod length) -> aux stack space 
=> Gives TLE

import java.util.*;
public class Solution {
	  public static int cutRod(int price[], int n) {
	    // Write your code here.
        int index = n;
        int len = n;
        return helper(index , len , price);
    }    
    private static int helper(int i, int len , int[] a){
        //base
        // if(len == 0) return a[i-1]; not working!!!!!! why?
        if(i == 0) return (len * a[0]);
        
        int notpick = 0 + helper(i-1, len, a);
        int pick = Integer.MIN_VALUE;
        if(i <= len) pick = a[i-1] + helper(i, len-i, a);
        return Math.max(pick , notpick);
    }
}


//Recursion
//TC = O(2^n)
//SC = O(n) rod length
public class Solution {
	public static int cutRod(int price[], int n) {
		// Write your code here.
		return helper(n, n, price );
	}
	public static int helper(int i, int size, int[] price){
		if(i == 1){
			if(size%i == 0) return price[0] * size/(i); //for understanding
			//return price[0] * size;
		}
		//notpick
		int notpick = 0 + helper(i-1, size, price);
		//pick 
		int pick = Integer.MIN_VALUE;
		if(i <= size) pick = price[i-1] + helper(i, size-(i), price);

		return Math.max(pick , notpick);
	}
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////                                                        
#2. Memo | TC = O(N x Len of rod) ->no. of states | SC = O(N x Len of rod):-dp[][]  +  O(Len of rod):-aux stack space 

import java.util.*;
public class Solution {
    public static int cutRod(int price[], int n) {
	// Write your code here.
        int index = n;
        int len = n;
        int dp[][] = new int[n][n+1];
        for(int[] x : dp){
            Arrays.fill(x , -1);
        }
        return helper(index , len , price, dp);
    }
    
    private static int helper(int i, int len , int[] a, int[][] dp){
        //base
       // if(len == 0) return a[i-1]; not working!!!!!! why?
        if(i == 0) return (len * a[0]);
        if(dp[i-1][len] != -1) return dp[i-1][len];
        
        int notpick = 0 + helper(i-1, len, a, dp);
        int pick = Integer.MIN_VALUE;
        if(i <= len) pick = a[i-1] + helper(i, len-i, a, dp);
        return dp[i-1][len] = Math.max(pick , notpick);
    }
}

//memo
//TC = O(n x len of rod) 
//SC = O(len of rod) stack space + O(n x len of rod) dp[][]
import java.util.*;
public class Solution {
	public static int cutRod(int price[], int n) {
		// Write your code here.
		int dp[][] = new int[n+1][n+1];
		for(int[] x : dp){
			Arrays.fill(x , -1);
		}
		return helper(n, n, price, dp);
	}
	public static int helper(int i, int len, int[] price, int[][] dp){
		if(i == 1){
			if(len%i == 0) return price[0] * len/(i);
			//return price[0] * size;
		}
		if(dp[i][len] != -1) return dp[i][len];
		//notpick
		int notpick = 0 + helper(i-1, len, price, dp);
		//pick 
		int pick = Integer.MIN_VALUE;
		if(i <= len) pick = price[i-1] + helper(i, len-(i), price, dp);

		return dp[i][len] = Math.max(pick , notpick);
	}
}
