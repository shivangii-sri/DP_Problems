Leetcode 518. Coin Change 2

Question :- You are given an integer array coins representing coins of different denominations and an integer amount representing a total amount of money.
Return the number of combinations that make up that amount. If that amount of money cannot be made up by any combination of the coins, return 0.
You may assume that you have an infinite number of each kind of coin.
The answer is guaranteed to fit into a signed 32-bit integer.


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
#1 Recursion | TC = Exponential - pick and not pick but any no. of times    |    SC= O(Target) -> aux stack space 


import java.util.*;
public class Solution {

	public static long countWaysToMakeChange(int denominations[], int value){
        //write your code here	
        int n = denominations.length;
        return helper(n-1, value, denominations);
	}
    private static long helper(int i, int tar, int[] a){
        //base
        if(i == 0){
            if(tar % a[0] == 0) return 1;
//             if(tar == 0) return 1; //possible by not picking the item at a[0]
//             else if(a[0] == tar) return 1;
            else return 0;
        }
        
        long notpick = helper(i-1, tar, a);
        long pick = 0;
        if(a[i] <= tar) pick = helper(i , tar - a[i] , a);
        return pick + notpick;
    }
	
}
