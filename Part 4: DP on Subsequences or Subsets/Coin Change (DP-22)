Leetcode 518. Coin Change 2 - Solution here is of LEETCODE

Question :- You are given an integer array coins representing coins of different denominations and an integer amount representing a total amount of money.
Return the number of combinations that make up that amount. If that amount of money cannot be made up by any combination of the coins, return 0.
You may assume that you have an infinite number of each kind of coin.
The answer is guaranteed to fit into a signed 32-bit integer.


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
#1 Recursion | TC = Exponential - pick and not pick but any no. of times    |    SC= O(Target) -> aux stack space bcz we are picking same index as infinite supply

class Solution {
    public int change(int amount, int[] coins) {
         //write your code here	
        int n = coins.length;
        return helper(n-1, amount, coins);
    }    
     private static int helper(int i, int tar, int[] a){
        //base
        if(i == 0){
            if(tar % a[0] == 0) return 1;
            else return 0;
        }        
        int notpick = helper(i-1, tar, a);
        int pick = 0;
        if(a[i] <= tar) pick = helper(i , tar - a[i] , a);
        return pick + notpick;
    }
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////                                                      
#2. Memoization | TC = O(N x Amount) = No. of states    |    //SC = O(Target) stack space bcz we are picking same index as infinite supply + O(n x amount) for dp[][]

class Solution {
    public int change(int amount, int[] coins) {
        int n = coins.length;
        int dp[][] = new int[n][amount+1];
        for(int[] x : dp){
            Arrays.fill(x , -1);
        }
        return helper(n-1, amount, coins, dp);
    }

    //no. of ways to make amount from infinite supply of coins
    public int helper(int i, int target, int[] coins, int[][]dp){
        if(i == 0){
            if(target%coins[i] == 0) return 1;
            else return 0;
        }
        if(dp[i][target] != -1) return dp[i][target];
        
        //not pick
        int notpick = helper(i-1, target, coins, dp);
        //pick
        int pick = 0; //no. of ways
        if(coins[i] <= target) pick = helper(i, target - coins[i], coins, dp); 
        
        return dp[i][target] = pick + notpick;
    }
}


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#3. Tabulation | TC = O(N x target) to compute these states |  SC= O(N x Target) dp[][] space , no aux stack space


//tabu
//TC = O(n x amount)
//SC = O(n x amount) dp array space

class Solution {
    public int change(int amount, int[] coins) {
        int n = coins.length;
        int dp[][] = new int[n][amount+1];
        //Initialisation
        for(int target=0; target<= amount; target++){
            if(target % coins[0] == 0) dp[0][target] = 1;
            else dp[0][target] = 0;
        }
        
        for(int i=1; i<n; i++){
            for(int target=0; target<=amount; target++){
                //not pick
                int notpick = dp[i-1][target]; 
                //pick
                int pick = 0; //no. of ways
                if(coins[i] <= target) pick = dp[i][target - coins[i]]; 

                dp[i][target] = pick + notpick;                
            }
        }
        return dp[n-1][amount];
    }
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#3. Tabulation | TC = O(N x amount) to compute these states |  SC = O(amount) dp array space

class Solution {
    public int change(int amount, int[] coins) {
        int n = coins.length;
        int prev[] = new int[amount+1];
        //Initialisation
        for(int target=0; target<= amount; target++){
            if(target % coins[0] == 0) prev[target] = 1;
            else prev[target] = 0;
        }
        
        for(int i=1; i<n; i++){
            int cur[] = new int[amount + 1];

            for(int target=0; target<=amount; target++){
                //not pick
                int notpick = prev[target]; 
                //pick
                int pick = 0; //no. of ways
                if(coins[i] <= target) pick = cur[target - coins[i]]; 

                cur[target] = pick + notpick;                
            }
            prev = cur;
        }
        return prev[amount];
    }
}
