Leetcode 518. Coin Change 2 - Solution here is of LEETCODE

Question :- You are given an integer array coins representing coins of different denominations and an integer amount representing a total amount of money.
Return the number of combinations that make up that amount. If that amount of money cannot be made up by any combination of the coins, return 0.
You may assume that you have an infinite number of each kind of coin.
The answer is guaranteed to fit into a signed 32-bit integer.


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
#1 Recursion | TC = Exponential - pick and not pick but any no. of times    |    SC= O(Target) -> aux stack space 

class Solution {
    public int change(int amount, int[] coins) {
         //write your code here	
        int n = coins.length;
        return helper(n-1, amount, coins);
    }    
     private static int helper(int i, int tar, int[] a){
        //base
        if(i == 0){
            if(tar % a[0] == 0) return 1;
            else return 0;
        }        
        int notpick = helper(i-1, tar, a);
        int pick = 0;
        if(a[i] <= tar) pick = helper(i , tar - a[i] , a);
        return pick + notpick;
    }
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////                                                      
#2. Memoization | TC = O(N x Target) = No. of states    |     SC= O(target) aux stack space  +  O(N x target) dp[][] space

class Solution {
    public int change(int amount, int[] coins) {
        //write your code here	
        int n = coins.length;
        int dp[][] = new int[n][amount+1];
        for(int[] x : dp){
            Arrays.fill(x, -1);
        }
        return helper(n-1, amount, coins, dp);
    }
    
     private static int helper(int i, int tar, int[] a, int[][] dp){
        //base
        if(i == 0){
            if(tar % a[0] == 0) return 1;
            else return 0;
        }
         if(dp[i][tar] != -1) return dp[i][tar];
        
        int notpick = helper(i-1, tar, a, dp);
        int pick = 0;
        if(a[i] <= tar) pick = helper(i , tar - a[i] , a, dp);
        return dp[i][tar] = pick + notpick;
    }
}


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#3. Tabulation | TC = O(N x target) to compute these states |  SC= O(N x Target) dp[][] space , no aux stack space


class Solution {
    public int change(int amount, int[] coins) {
         //write your code here	
        int n = coins.length;
        int dp[][] = new int[n][amount+1];
        //Initialise base case
        
        for(int tar=0; tar<=amount; tar++){
            if(tar % coins[0] == 0)
                dp[0][tar] = 1;
            else 
                dp[0][tar] = 0;
        }
        
        //for loops
        for(int i=1; i<n; i++){
            for(int tar=0; tar <= amount; tar++){
                
                int notpick = dp[i-1][tar];
                int pick = 0;
                if(coins[i] <= tar) pick = dp[i][tar- coins[i]];
                dp[i][tar] = pick + notpick; 
                
            }
        }        
        return dp[n-1][amount];
    }
}
