***********************************************************************************************************************************************************
Striver Code - Using Count Subsets with a modified target value. 
Only did Memo of Striver Code.

Question: Given an array ‘ARR’, partition it into two subsets (possibly empty) such that their union is the original array. 
Let the sum of the elements of these two subsets be ‘S1’ and ‘S2’.  
Given a difference ‘D’, count the number of partitions in which ‘S1’ is greater than or equal to ‘S2’ and the difference between ‘S1’ and ‘S2’ is equal to ‘D’. 
Since the answer may be too large, return it modulo ‘10^9 + 7’. 

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#1. Recursion 

//recursion
//TC= O(2^n)
//SC = O(n) stack space
import java.util.* ;
import java.io.*; 
public class Solution {
    static int mod = (int)(1e9 + 7);
	public static int countPartitions(int n, int d, int[] arr) {
		
		int tot = 0;
		for(int x  :arr){
			tot += x;
		}
		//NOTE : tot = s1 + (s1+d) => tot = 2(s1) + d
		if(tot-d <0 || (tot-d)%2!=0) return 0;
		int ans = countSubsetSumK(arr, (tot-d)/2);
		return ans;
	}
	public static int countSubsetSumK(int num[], int tar) {
		// return the count of subset sum equal k
		return helper(num.length-1, tar, num );
	}
	
    	public static int helper(int i, int target, int[] nums){
		if(i == 0){
		    if(target == 0 && nums[0] == 0) return 2;        
		    else if(target == 0 || target == nums[0]) return 1;
		    else return 0;
		}
		//notpick
		int notpick = helper(i-1, target, nums);
		//pick
		int pick = 0;
		if(nums[i] <= target) pick = helper(i-1, target - nums[i], nums);
		return (pick + notpick)%mod;
    	}

}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#2. Memoization | TC = O(N x Target) no. of states | SC= O(N) aux stack space + O(N x Target) dp[][] space
//memo
//TC = O(n x target_sum)
// Space = O(n x target_sum) dp array + O(n) stack space
import java.util.* ;
import java.io.*; 
public class Solution {
    static int mod = (int)(1e9 + 7);
	public static int countPartitions(int n, int d, int[] arr) {
		
		int tot = 0;
		for(int x  :arr){
			tot += x;
		}
		//NOTE : tot = s1 + (s1+d) => tot = 2(s1) + d
		if(tot-d <0 || (tot-d)%2!=0) return 0;
		int ans = countSubsetSumK(arr, (tot-d)/2);
		return ans;
	}
	public static int countSubsetSumK(int num[], int tar) {
        // return the count of subset sum equal k
        int n = num.length;
        int dp[][] = new int[n][tar+1];
        for(int[] x : dp){
            Arrays.fill(x , -1);
        }
        return helper(n-1, tar, num, dp);
    }
    public static int helper(int i, int target, int[] nums, int[][] dp){
        if(i == 0){            
            if(target == 0 && nums[0] == 0) return 2;        
            else if(target == 0 || target == nums[0]) return 1;
            else return 0;
        }
        if(dp[i][target] != -1) return dp[i][target];
        //notpick
        int notpick = helper(i-1, target, nums, dp);
        //pick
        int pick = 0;
        if(nums[i] <= target) pick = helper(i-1, target - nums[i], nums, dp);

        return dp[i][target]= pick + notpick;
    }

}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#3. Tabulation | TC = O(N x Target) no. of states | SC= O(N x Target) dp[][] space
