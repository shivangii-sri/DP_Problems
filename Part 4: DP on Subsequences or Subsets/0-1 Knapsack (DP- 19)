***********************************************************************************************************************************************************
VVVV IMP Question -: Given weight and value array for n items, with Knapsack weight W. Find the max value that can be added into knasack.
***********************************************************************************************************************************************************

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
#1 Recursion | TC = O(2^N) -for every index we have two possibilities pick and not pick    |    SC= O(N) -> aux stack space 
=> Gives TLE

Approach:
1. We focus on two parameters- index, W of Knapsack.
2. Starting with the last index, we explore 2 possibilities- not pick or pick it only if its weight is <= knapsack weight.
3. If we pick an element, we make sure to reduce knapsck Weight W.
3. Return max of (pick, notpick).

import java.util.*;
public class Solution{
    static int knapsack(int[] weight, int[] value, int n, int maxWeight) {
        return helper(n-1, maxWeight, weight, value);
    }
    private static int helper(int i, int W, int[] wt, int[] val){
        //base
        if(i == 0){
            if( wt[0] <= W) return val[0];
            else return 0;
        }
        
        int notpick = helper(i-1, W, wt, val);
        int pick = Integer.MIN_VALUE;
        if(wt[i] <= W) pick = val[i] + helper(i-1, W-wt[i], wt, val);
        
        return Math.max(pick , notpick);
    }
}





///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////                                                        
#2. Memo | TC = O(N x W) -no. of states | SC = O(N x W):-dp[][]  +  O(N):-aux stack space 

Approach:
1. Two changing parameters:- index, W
    a. index varies from 0 to n-1. 
    b. W varies from 0 to maxWeight of knapsack
    c. Thus create dp[][] of size [n][W+1]
    
    
import java.util.*;
public class Solution{

    static int knapsack(int[] weight, int[] value, int n, int maxWeight) {
        int[][] dp = new int[n][maxWeight+1];
        for(int[] x : dp){
            Arrays.fill(x, -1) ;
        }       
        return helper(n-1, maxWeight, weight, value, dp);
    }
    private static int helper(int i, int W, int[] wt, int[] val, int[][] dp){
        //base
        if(i == 0){
            if( wt[0] <= W) return val[0];
            else return 0;
        }
        if(dp[i][W] != -1) return dp[i][W];
                
        int notpick = helper(i-1, W, wt, val, dp);
        int pick = Integer.MIN_VALUE;
        if(wt[i] <= W) pick = val[i] + helper(i-1, W-wt[i], wt, val, dp);
        
        return dp[i][W] = Math.max(pick , notpick);
    }
}


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#3. Tabulation | TC = O(N x W) to compute these states |  SC= O(N x W) dp[][] space , no aux stack space

import java.util.* ;
import java.io.*; 

public class Solution{
    static int knapsack(int[] weight, int[] value, int n, int maxWeight) {
            int dp[][] = new int[n][maxWeight+1];
            //Initialisation
            for(int w=0; w<=maxWeight; w++){
                if(weight[0] <= w) dp[0][w] = value[0];
            }

            for(int i=1; i<n; i++){
                for(int w=0; w<=maxWeight; w++){
                    //not pick
                    int notpick = 0 + dp[i-1][w]; 
                    int pick = 0;
                    if(weight[i] <= w) pick = value[i] + dp[i-1][w-weight[i]];

                    dp[i][w] = Math.max(pick , notpick);
                }
            }
            return dp[n-1][maxWeight];
    }
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#4. SPace Optimization | TC = O(n x w) | SC = O(w) dp array space

import java.util.* ;
import java.io.*; 

public class Solution{
    static int knapsack(int[] weight, int[] value, int n, int maxWeight) {
            int prev[] = new int[maxWeight+1];
            //Initialisation
            for(int w=0; w<=maxWeight; w++){
                if(weight[0] <= w) prev[w] = value[0];
            }

            for(int i=1; i<n; i++){
                int cur[] = new int[maxWeight+1];
                for(int w=0; w<=maxWeight; w++){
                    //not pick
                    int notpick = 0 + prev[w]; 
                    int pick = 0;
                    if(weight[i] <= w) pick = value[i] + prev[w-weight[i]];

                    cur[w] = Math.max(pick , notpick);
                }
                prev = cur;
            }
            return prev[maxWeight];
    }
}
