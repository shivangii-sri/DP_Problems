Approach for DP on Subsequence
1. Express everything in terms of index and target
2. Explore all possibilities of that index. (Eg. an index can be part of the subsequence or not the part of the subsequence)
3. Return T/F

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#1 Recursion | TC = O(2^N) -for every index we have two possibilities pick and not pick | SC= O(N) -> aux stack space 
//Recursion doing by starting from index 0 to n

public class Solution {
    public static boolean subsetSumToK(int n, int k, int arr[]){
        // Write your code here.
         return solUtil(0, 0 , arr, k );
    }
    public static boolean solUtil(int idx, int sum , int[] arr, int k){
       if(sum == k) return true;
       if(idx == arr.length) return false;
       if( sum > k) return false;
    
       boolean take = solUtil(idx+1, sum+arr[idx], arr, k);
       boolean notTake = solUtil(idx+1, sum , arr, k);      
       return (take || notTake); 
    }
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                        
#2. Memoization | TC = O(N x K) = No. of states    |     SC= O(N) aux stack space  +  O(N x K) dp[][] space


import java.util.*;
public class Solution {
   //doing by Memo , starting from index 0 to n
    public static boolean subsetSumToK(int n, int k, int arr[]){
        // Write your code here.
        int dp[][] = new int[n][k+1];
        for(int[] x : dp){
            Arrays.fill(x , -1);
        }
         return solUtil(0, 0 , arr, k , dp);
    }
    public static boolean solUtil(int idx, int sum , int[] arr, int k, int[][] dp){
       if(sum == k) return true;
       if(idx == arr.length) return false;
       if( sum > k) return false;
       if(dp[idx][sum] != -1) {
           if(dp[idx][sum] == 0) return false;
           else return true;
       }

        boolean take = solUtil(idx+1, sum+arr[idx], arr, k, dp);
        boolean notTake = solUtil(idx+1, sum , arr, k, dp);    
        boolean res = take || notTake;
        if(res == false) dp[idx][sum] = 0;
        else dp[idx][sum] = 1;
        return res;
    }
}
