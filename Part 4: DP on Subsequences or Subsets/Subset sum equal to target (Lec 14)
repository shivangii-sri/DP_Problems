Approach for DP on Subsequence
1. Express everything in terms of index and target
2. Explore all possibilities of that index. (Eg. an index can be part of the subsequence or not the part of the subsequence)
3. Return T/F

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
#1 Recursion | TC = O(2^N) -for every index we have two possibilities pick and not pick    |    SC= O(N) -> aux stack space 


public class Solution {
   // Starting from index n to 0
    public static boolean subsetSumToK(int n, int k, int arr[]){
        // Write your code here.
         return solUtil( n-1, k, arr );
    }
    public static boolean solUtil(int idx, int target , int[] arr){
       if(target == 0) return true;
       if(idx == 0) return arr[0] == target;

        
        boolean notTake = solUtil(idx-1, target, arr);
        boolean take = false;
        if(target >= arr[idx])
            take = solUtil(idx-1, target-arr[idx], arr);
          
        return (take || notTake); 
    }
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                        
#2. Memoization | TC = O(N x K) = No. of states    |     SC= O(N) aux stack space  +  O(N x K) dp[][] space

import java.util.*;
public class Solution {
   //doing by Memo, starting from index n to 0
    public static boolean subsetSumToK(int n, int k, int arr[]){
        // Write your code here.
        int[][] dp=new int[n][k+1];     
        for(int[] x:dp){
            Arrays.fill(x,-1);
        }
        
        int ans=solUtil(n-1,arr,k,dp);
        
        if(ans==1) return true;
        return false;
    }
    public static int solUtil(int index, int[] arr, int target, int[][] dp){   
        if(target==0) return 1;      
        if(index==0) {
            if( arr[index]==target) return 1;
            else return 0;
        }
        if(dp[index][target]!=-1) return dp[index][target];   
        
        int notTake=solUtil(index-1,arr,target,dp);      
        int take=0;
        if(target>=arr[index]){
            take=solUtil(index-1,arr,target-arr[index],dp);
        }               
        if(take==0 && notTake==0){
            dp[index][target]=0;
        }else{
            dp[index][target]=1;
        }
        return dp[index][target];
    }
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#3. Tabulation | TC = O(N x K) to compute these states |  SC= O(M x N) dp[][] space , no aux stack space
//1. Convert dp[][] into boolean


import java.util.*;
public class Solution {
   
    public static boolean subsetSumToK(int n, int k, int arr[]){
        boolean[][] dp=new boolean[n][k+1];     
        //Step 1. Initialize your base cases
        //Base Case 1 :- 
        for(int i=0; i<n; i++) dp[i][0] = true; //we can always have 0 target made by taking empty subset
        
         // Base Case 2 :- 
        if(arr[0] <= k) dp[0][arr[0]] = true; //at index 0, we can only form targets whose value is equal to arr[0] i.e target == arr[0]
        //Also can write this way :-
//         for(int target=1; target<=k ; target++){
//             if(target <= k){
//                if(arr[0] == target) dp[0][target] = true;   
//             }
//         }     
        
        //Step 2. For loop :-  1st row is marked, also first column for target==0, is marked.
        for(int index=1; index<n ; index++){
            for(int target=1; target<=k ; target++){
                //Step 3. Copy paste recursion logic
                boolean notTake= dp[index-1][target];      
                boolean take=false;
                if(target>=arr[index]){
                    take= dp[index-1][ target-arr[index] ];
                }               
                dp[index][target] = take || notTake;                
            }
        }
        return dp[n-1][k];
    }
}




*********************************************************************************************************************************************************************
//Recursion doing by starting from index 0 to n  _-------- Solution I tried doing ,  stopped at MEMO


 
#1 Recursion | TC = O(2^N) -for every index we have two possibilities pick and not pick | SC= O(N) -> aux stack space 

public class Solution {
    public static boolean subsetSumToK(int n, int k, int arr[]){
        // Write your code here.
         return solUtil(0, 0 , arr, k );
    }
    public static boolean solUtil(int idx, int sum , int[] arr, int k){
       if(sum == k) return true;
       if(idx == arr.length) return false;
       if( sum > k) return false;
    
       boolean take = solUtil(idx+1, sum+arr[idx], arr, k);
       boolean notTake = solUtil(idx+1, sum , arr, k);      
       return (take || notTake); 
    }
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                        
#2. Memoization | TC = O(N x K) = No. of states    |     SC= O(N) aux stack space  +  O(N x K) dp[][] space


import java.util.*;
public class Solution {
   //doing by Memo , starting from index 0 to n
    public static boolean subsetSumToK(int n, int k, int arr[]){
        // Write your code here.
        int dp[][] = new int[n][k+1];
        for(int[] x : dp){
            Arrays.fill(x , -1);
        }
         return solUtil(0, 0 , arr, k , dp);
    }
    public static boolean solUtil(int idx, int sum , int[] arr, int k, int[][] dp){
       if(sum == k) return true;
       if(idx == arr.length) return false;
       if( sum > k) return false;
       if(dp[idx][sum] != -1) {
           if(dp[idx][sum] == 0) return false;
           else return true;
       }

        boolean take = solUtil(idx+1, sum+arr[idx], arr, k, dp);
        boolean notTake = solUtil(idx+1, sum , arr, k, dp);    
        boolean res = take || notTake;
        if(res == false) dp[idx][sum] = 0;
        else dp[idx][sum] = 1;
        return res;
    }
}
