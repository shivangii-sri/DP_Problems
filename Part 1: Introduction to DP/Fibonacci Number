//4. Space Optimization
// TC = O(N) , SC = O(1) - no stack space AND no array space
class Solution {    
    public int fib(int n) {
        if(n==1 || n==0) return n;
        
        int prev = 1;
        int prev2 = 0;
        
        for(int i=2 ; i<=n ; i++){
            int curi = prev + prev2;
            prev2 = prev;
            prev = curi;
         }
        
        return prev;
    }
}


//3. Tabulation  - 
// TC = O(N) , SC = O(N) - DP Array space
class Solution {    
    public int fib(int n) {
        if(n==1 || n==0) return n;
        
        int dp[] = new int[n+1];
        dp[0] = 0;
        dp[1] = 1;
        
        for(int i =2 ; i<=n ; i++){
            dp[i] = dp[i-1] + dp[i-2];
        }
        
        return dp[n];
    }
}

 
 //2.  Memoization -> TC = O(N) , SC = O(2N) - stack space and dp array 
class Solution { 
    public int fib(int n) {
        int dp[] = new int[n+1];
        Arrays.fill(dp , -1);
        
        return util( n , dp);       
    }    
    private int util(int n , int[] dp){
        //base case
        if(n == 0 || n==1) return n;
        if(dp[n] != -1) return dp[n];
        
        return dp[n] = util(n-1 , dp) + util(n-2 , dp);       
    }
}


//1. Recursion -> TC = O(2^N) exponential, SC = O(N) -stack space
class Solution {
    public int fib(int n) {
        //base case
        if(n==0 || n==1) return n;
        return fib(n-1)+fib(n-2);
    }
}

